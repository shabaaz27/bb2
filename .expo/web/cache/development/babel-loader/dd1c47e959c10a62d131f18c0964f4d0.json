{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _NativeEventEmitter2 = _interopRequireDefault(require(\"../EventEmitter/NativeEventEmitter\"));\n\nvar _logError = _interopRequireDefault(require(\"../Utilities/logError\"));\n\nvar _EventEmitter2 = _interopRequireDefault(require(\"../vendor/emitter/EventEmitter\"));\n\nvar _NativeAppState = _interopRequireDefault(require(\"./NativeAppState\"));\n\nvar _invariant = _interopRequireDefault(require(\"invariant\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar AppState = function (_NativeEventEmitter) {\n  (0, _inherits2.default)(AppState, _NativeEventEmitter);\n\n  var _super = _createSuper(AppState);\n\n  function AppState() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, AppState);\n    _this = _super.call(this, _NativeAppState.default);\n    _this._supportedEvents = ['change', 'memoryWarning', 'blur', 'focus'];\n    _this.isAvailable = true;\n    _this._eventHandlers = _this._supportedEvents.reduce(function (handlers, key) {\n      handlers[key] = new Map();\n      return handlers;\n    }, {});\n    _this.currentState = _NativeAppState.default.getConstants().initialAppState;\n    var eventUpdated = false;\n\n    _this.addListener('appStateDidChange', function (appStateData) {\n      eventUpdated = true;\n      _this.currentState = appStateData.app_state;\n    });\n\n    _NativeAppState.default.getCurrentAppState(function (appStateData) {\n      if (!eventUpdated && _this.currentState !== appStateData.app_state) {\n        _this.currentState = appStateData.app_state;\n\n        _this.emit('appStateDidChange', appStateData);\n      }\n    }, _logError.default);\n\n    return _this;\n  }\n\n  (0, _createClass2.default)(AppState, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      (0, _invariant.default)(this._supportedEvents.indexOf(type) !== -1, 'Trying to subscribe to unknown event: \"%s\"', type);\n\n      switch (type) {\n        case 'change':\n          {\n            this._eventHandlers[type].set(handler, this.addListener('appStateDidChange', function (appStateData) {\n              handler(appStateData.app_state);\n            }));\n\n            break;\n          }\n\n        case 'memoryWarning':\n          {\n            this._eventHandlers[type].set(handler, this.addListener('memoryWarning', handler));\n\n            break;\n          }\n\n        case 'blur':\n        case 'focus':\n          {\n            this._eventHandlers[type].set(handler, this.addListener('appStateFocusChange', function (hasFocus) {\n              if (type === 'blur' && !hasFocus) {\n                handler();\n              }\n\n              if (type === 'focus' && hasFocus) {\n                handler();\n              }\n            }));\n          }\n      }\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      (0, _invariant.default)(this._supportedEvents.indexOf(type) !== -1, 'Trying to remove listener for unknown event: \"%s\"', type);\n\n      if (!this._eventHandlers[type].has(handler)) {\n        return;\n      }\n\n      this._eventHandlers[type].get(handler).remove();\n\n      this._eventHandlers[type].delete(handler);\n    }\n  }]);\n  return AppState;\n}(_NativeEventEmitter2.default);\n\nfunction throwMissingNativeModule() {\n  (0, _invariant.default)(false, 'Cannot use AppState module when native RCTAppState is not included in the build.\\n' + 'Either include it, or check AppState.isAvailable before calling any methods.');\n}\n\nvar MissingNativeAppStateShim = function (_EventEmitter) {\n  (0, _inherits2.default)(MissingNativeAppStateShim, _EventEmitter);\n\n  var _super2 = _createSuper(MissingNativeAppStateShim);\n\n  function MissingNativeAppStateShim() {\n    var _this2;\n\n    (0, _classCallCheck2.default)(this, MissingNativeAppStateShim);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this2 = _super2.call.apply(_super2, [this].concat(args));\n    _this2.isAvailable = false;\n    _this2.currentState = null;\n    return _this2;\n  }\n\n  (0, _createClass2.default)(MissingNativeAppStateShim, [{\n    key: \"addEventListener\",\n    value: function addEventListener(type, handler) {\n      throwMissingNativeModule();\n    }\n  }, {\n    key: \"removeEventListener\",\n    value: function removeEventListener(type, handler) {\n      throwMissingNativeModule();\n    }\n  }, {\n    key: \"addListener\",\n    value: function addListener() {\n      throwMissingNativeModule();\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners() {\n      throwMissingNativeModule();\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription() {\n      throwMissingNativeModule();\n    }\n  }]);\n  return MissingNativeAppStateShim;\n}(_EventEmitter2.default);\n\nvar AppStateInstance = _NativeAppState.default ? new AppState() : new MissingNativeAppStateShim();\nmodule.exports = AppStateInstance;","map":{"version":3,"sources":["C:/Users/mysiew/Documents/eCommerce/codecanyon-xPJMYS8x-react-native-delivery-solution-with-advance-website-and-cms/SourceCode/vesend-consumer-app-master/node_modules/react-native/Libraries/AppState/AppState.js"],"names":["AppState","NativeAppState","_supportedEvents","isAvailable","_eventHandlers","reduce","handlers","key","Map","currentState","getConstants","initialAppState","eventUpdated","addListener","appStateData","app_state","getCurrentAppState","emit","logError","type","handler","indexOf","set","hasFocus","has","get","remove","delete","NativeEventEmitter","throwMissingNativeModule","MissingNativeAppStateShim","EventEmitter","AppStateInstance","module","exports"],"mappings":"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","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport NativeEventEmitter from '../EventEmitter/NativeEventEmitter';\nimport logError from '../Utilities/logError';\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport NativeAppState from './NativeAppState';\nimport invariant from 'invariant';\n\n/**\n * `AppState` can tell you if the app is in the foreground or background,\n * and notify you when the state changes.\n *\n * See https://reactnative.dev/docs/appstate.html\n */\nclass AppState extends NativeEventEmitter {\n  _eventHandlers: Object;\n  _supportedEvents = ['change', 'memoryWarning', 'blur', 'focus'];\n  currentState: ?string;\n  isAvailable: boolean;\n\n  constructor() {\n    super(NativeAppState);\n\n    this.isAvailable = true;\n    this._eventHandlers = this._supportedEvents.reduce((handlers, key) => {\n      handlers[key] = new Map();\n      return handlers;\n    }, {});\n\n    this.currentState = NativeAppState.getConstants().initialAppState;\n\n    let eventUpdated = false;\n\n    // TODO: this is a terrible solution - in order to ensure `currentState`\n    // prop is up to date, we have to register an observer that updates it\n    // whenever the state changes, even if nobody cares. We should just\n    // deprecate the `currentState` property and get rid of this.\n    this.addListener('appStateDidChange', appStateData => {\n      eventUpdated = true;\n      this.currentState = appStateData.app_state;\n    });\n\n    // TODO: see above - this request just populates the value of `currentState`\n    // when the module is first initialized. Would be better to get rid of the\n    // prop and expose `getCurrentAppState` method directly.\n    NativeAppState.getCurrentAppState(appStateData => {\n      // It's possible that the state will have changed here & listeners need to be notified\n      if (!eventUpdated && this.currentState !== appStateData.app_state) {\n        this.currentState = appStateData.app_state;\n        this.emit('appStateDidChange', appStateData);\n      }\n    }, logError);\n  }\n\n  // TODO: now that AppState is a subclass of NativeEventEmitter, we could\n  // deprecate `addEventListener` and `removeEventListener` and just use\n  // addListener` and `listener.remove()` directly. That will be a breaking\n  // change though, as both the method and event names are different\n  // (addListener events are currently required to be globally unique).\n  /**\n   * Add a handler to AppState changes by listening to the `change` event type\n   * and providing the handler.\n   *\n   * See https://reactnative.dev/docs/appstate.html#addeventlistener\n   */\n  addEventListener(type: string, handler: Function) {\n    invariant(\n      this._supportedEvents.indexOf(type) !== -1,\n      'Trying to subscribe to unknown event: \"%s\"',\n      type,\n    );\n\n    switch (type) {\n      case 'change': {\n        this._eventHandlers[type].set(\n          handler,\n          this.addListener('appStateDidChange', appStateData => {\n            handler(appStateData.app_state);\n          }),\n        );\n        break;\n      }\n      case 'memoryWarning': {\n        this._eventHandlers[type].set(\n          handler,\n          this.addListener('memoryWarning', handler),\n        );\n        break;\n      }\n\n      case 'blur':\n      case 'focus': {\n        this._eventHandlers[type].set(\n          handler,\n          this.addListener('appStateFocusChange', hasFocus => {\n            if (type === 'blur' && !hasFocus) {\n              handler();\n            }\n            if (type === 'focus' && hasFocus) {\n              handler();\n            }\n          }),\n        );\n      }\n    }\n  }\n\n  /**\n   * Remove a handler by passing the `change` event type and the handler.\n   *\n   * See https://reactnative.dev/docs/appstate.html#removeeventlistener\n   */\n  removeEventListener(type: string, handler: Function) {\n    invariant(\n      this._supportedEvents.indexOf(type) !== -1,\n      'Trying to remove listener for unknown event: \"%s\"',\n      type,\n    );\n    if (!this._eventHandlers[type].has(handler)) {\n      return;\n    }\n    this._eventHandlers[type].get(handler).remove();\n    this._eventHandlers[type].delete(handler);\n  }\n}\n\nfunction throwMissingNativeModule() {\n  invariant(\n    false,\n    'Cannot use AppState module when native RCTAppState is not included in the build.\\n' +\n      'Either include it, or check AppState.isAvailable before calling any methods.',\n  );\n}\n\nclass MissingNativeAppStateShim extends EventEmitter {\n  // AppState\n  isAvailable: boolean = false;\n  currentState: ?string = null;\n\n  addEventListener(type: string, handler: Function) {\n    throwMissingNativeModule();\n  }\n\n  removeEventListener(type: string, handler: Function) {\n    throwMissingNativeModule();\n  }\n\n  // EventEmitter\n  addListener() {\n    throwMissingNativeModule();\n  }\n\n  removeAllListeners() {\n    throwMissingNativeModule();\n  }\n\n  removeSubscription() {\n    throwMissingNativeModule();\n  }\n}\n\n// This module depends on the native `RCTAppState` module. If you don't include it,\n// `AppState.isAvailable` will return `false`, and any method calls will throw.\n// We reassign the class variable to keep the autodoc generator happy.\nconst AppStateInstance: AppState | MissingNativeAppStateShim = NativeAppState\n  ? new AppState()\n  : new MissingNativeAppStateShim();\n\nmodule.exports = AppStateInstance;\n"]},"metadata":{},"sourceType":"script"}