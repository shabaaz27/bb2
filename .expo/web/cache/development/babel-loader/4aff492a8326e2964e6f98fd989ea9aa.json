{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.provideReferenceClass = provideReferenceClass;\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar _DatabaseDataSnapshot = _interopRequireDefault(require(\"./DatabaseDataSnapshot\"));\n\nvar _DatabaseSyncTree = _interopRequireDefault(require(\"./DatabaseSyncTree\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar eventTypes = ['value', 'child_added', 'child_changed', 'child_moved', 'child_removed'];\nvar DatabaseReference = null;\n\nfunction provideReferenceClass(databaseReference) {\n  DatabaseReference = databaseReference;\n}\n\nvar listeners = 0;\n\nvar DatabaseQuery = function (_ReferenceBase) {\n  (0, _inherits2.default)(DatabaseQuery, _ReferenceBase);\n\n  var _super = _createSuper(DatabaseQuery);\n\n  function DatabaseQuery(database, path, modifiers) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DatabaseQuery);\n    _this = _super.call(this, path);\n    _this._database = database;\n    _this._modifiers = modifiers;\n    return _this;\n  }\n\n  (0, _createClass2.default)(DatabaseQuery, [{\n    key: \"endAt\",\n    value: function endAt(value, key) {\n      if (!(0, _common.isNumber)(value) && !(0, _common.isString)(value) && !(0, _common.isBoolean)(value) && !(0, _common.isNull)(value)) {\n        throw new Error(\"firebase.database().ref().endAt(*) 'value' must be a number, string, boolean or null value.\");\n      }\n\n      if (!(0, _common.isUndefined)(key) && !(0, _common.isString)(key)) {\n        throw new Error(\"firebase.database().ref().endAt(_, *) 'key' must be a string value if defined.\");\n      }\n\n      if (this._modifiers.hasEndAt()) {\n        throw new Error('firebase.database().ref().endAt() Ending point was already set (by another call to endAt or equalTo).');\n      }\n\n      var modifiers = this._modifiers._copy().endAt(value, key);\n\n      modifiers.validateModifiers('firebase.database().ref().endAt()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"equalTo\",\n    value: function equalTo(value, key) {\n      if (!(0, _common.isNumber)(value) && !(0, _common.isString)(value) && !(0, _common.isBoolean)(value) && !(0, _common.isNull)(value)) {\n        throw new Error(\"firebase.database().ref().equalTo(*) 'value' must be a number, string, boolean or null value.\");\n      }\n\n      if (!(0, _common.isUndefined)(key) && !(0, _common.isString)(key)) {\n        throw new Error(\"firebase.database().ref().equalTo(_, *) 'key' must be a string value if defined.\");\n      }\n\n      if (this._modifiers.hasStartAt()) {\n        throw new Error('firebase.database().ref().equalTo() Starting point was already set (by another call to startAt or equalTo).');\n      }\n\n      if (this._modifiers.hasEndAt()) {\n        throw new Error('firebase.database().ref().equalTo() Ending point was already set (by another call to endAt or equalTo).');\n      }\n\n      return this.startAt(value, key).endAt(value, key);\n    }\n  }, {\n    key: \"isEqual\",\n    value: function isEqual(other) {\n      if (!(other instanceof DatabaseQuery)) {\n        throw new Error(\"firebase.database().ref().isEqual(*) 'other' must be an instance of Query.\");\n      }\n\n      var sameApp = other._database.app === this._database.app;\n      var sameDatabasePath = other.toString() === this.toString();\n\n      var sameModifiers = other._modifiers.toString() === this._modifiers.toString();\n\n      return sameApp && sameDatabasePath && sameModifiers;\n    }\n  }, {\n    key: \"limitToFirst\",\n    value: function limitToFirst(limit) {\n      if (this._modifiers.isValidLimit(limit)) {\n        throw new Error(\"firebase.database().ref().limitToFirst(*) 'limit' must be a positive integer value.\");\n      }\n\n      if (this._modifiers.hasLimit()) {\n        throw new Error('firebase.database().ref().limitToFirst(*) Limit was already set (by another call to limitToFirst, or limitToLast)');\n      }\n\n      return new DatabaseQuery(this._database, this.path, this._modifiers._copy().limitToFirst(limit));\n    }\n  }, {\n    key: \"limitToLast\",\n    value: function limitToLast(limit) {\n      if (this._modifiers.isValidLimit(limit)) {\n        throw new Error(\"firebase.database().ref().limitToLast(*) 'limit' must be a positive integer value.\");\n      }\n\n      if (this._modifiers.hasLimit()) {\n        throw new Error('firebase.database().ref().limitToLast(*) Limit was already set (by another call to limitToFirst, or limitToLast)');\n      }\n\n      return new DatabaseQuery(this._database, this.path, this._modifiers._copy().limitToLast(limit));\n    }\n  }, {\n    key: \"off\",\n    value: function off(eventType, callback, context) {\n      if (arguments.length === 0) {\n        return _DatabaseSyncTree.default.removeListenersForRegistrations(_DatabaseSyncTree.default.getRegistrationsByPath(this.path));\n      }\n\n      if (!(0, _common.isUndefined)(eventType) && !eventTypes.includes(eventType)) {\n        throw new Error(\"firebase.database().ref().off(*) 'eventType' must be one of \" + eventTypes.join(', ') + \".\");\n      }\n\n      if (!(0, _common.isUndefined)(callback) && !(0, _common.isFunction)(callback)) {\n        throw new Error(\"firebase.database().ref().off(_, *) 'callback' must be a function.\");\n      }\n\n      if (!(0, _common.isUndefined)(context) && !(0, _common.isObject)(context)) {\n        throw new Error(\"firebase.database().ref().off(_, _, *) 'context' must be an object.\");\n      }\n\n      if (eventType && callback) {\n        var registration = _DatabaseSyncTree.default.getOneByPathEventListener(this.path, eventType, callback);\n\n        if (!registration) {\n          return [];\n        }\n\n        _DatabaseSyncTree.default.removeListenersForRegistrations([registration + \"$cancelled\"]);\n\n        return _DatabaseSyncTree.default.removeListenerRegistrations(callback, [registration]);\n      }\n\n      var registrations = _DatabaseSyncTree.default.getRegistrationsByPathEvent(this.path, eventType);\n\n      _DatabaseSyncTree.default.removeListenersForRegistrations(_DatabaseSyncTree.default.getRegistrationsByPathEvent(this.path, eventType + \"$cancelled\"));\n\n      return _DatabaseSyncTree.default.removeListenersForRegistrations(registrations);\n    }\n  }, {\n    key: \"on\",\n    value: function on(eventType, callback, cancelCallbackOrContext, context) {\n      if (!eventTypes.includes(eventType)) {\n        throw new Error(\"firebase.database().ref().on(*) 'eventType' must be one of \" + eventTypes.join(', ') + \".\");\n      }\n\n      if (!(0, _common.isFunction)(callback)) {\n        throw new Error(\"firebase.database().ref().on(_, *) 'callback' must be a function.\");\n      }\n\n      if (!(0, _common.isUndefined)(cancelCallbackOrContext) && !(0, _common.isFunction)(cancelCallbackOrContext) && !(0, _common.isObject)(cancelCallbackOrContext)) {\n        throw new Error(\"firebase.database().ref().on(_, _, *) 'cancelCallbackOrContext' must be a function or object.\");\n      }\n\n      if (!(0, _common.isUndefined)(context) && !(0, _common.isObject)(context)) {\n        throw new Error(\"firebase.database().ref().on(_, _, _, *) 'context' must be an object.\");\n      }\n\n      var queryKey = this._generateQueryKey();\n\n      var eventRegistrationKey = this._generateQueryEventKey(eventType);\n\n      var registrationCancellationKey = eventRegistrationKey + \"$cancelled\";\n\n      var _context = cancelCallbackOrContext && !(0, _common.isFunction)(cancelCallbackOrContext) ? cancelCallbackOrContext : context;\n\n      _DatabaseSyncTree.default.addRegistration({\n        eventType: eventType,\n        ref: this.ref,\n        path: this.path,\n        key: queryKey,\n        appName: this._database.app.name,\n        dbURL: this._database._customUrlOrRegion,\n        eventRegistrationKey: eventRegistrationKey,\n        listener: _context ? callback.bind(_context) : callback\n      });\n\n      if (cancelCallbackOrContext && (0, _common.isFunction)(cancelCallbackOrContext)) {\n        _DatabaseSyncTree.default.addRegistration({\n          ref: this.ref,\n          once: true,\n          path: this.path,\n          key: queryKey,\n          appName: this._database.app.name,\n          dbURL: this._database._customUrlOrRegion,\n          eventType: eventType + \"$cancelled\",\n          eventRegistrationKey: registrationCancellationKey,\n          listener: _context ? cancelCallbackOrContext.bind(_context) : cancelCallbackOrContext\n        });\n      }\n\n      this._database.native.on({\n        eventType: eventType,\n        path: this.path,\n        key: queryKey,\n        appName: this._database.app.name,\n        modifiers: this._modifiers.toArray(),\n        hasCancellationCallback: (0, _common.isFunction)(cancelCallbackOrContext),\n        registration: {\n          eventRegistrationKey: eventRegistrationKey,\n          key: queryKey,\n          registrationCancellationKey: registrationCancellationKey\n        }\n      });\n\n      listeners += 1;\n      return callback;\n    }\n  }, {\n    key: \"once\",\n    value: function once(eventType, successCallBack, failureCallbackOrContext, context) {\n      var _this2 = this;\n\n      if (!eventTypes.includes(eventType)) {\n        throw new Error(\"firebase.database().ref().once(*) 'eventType' must be one of \" + eventTypes.join(', ') + \".\");\n      }\n\n      if (!(0, _common.isUndefined)(successCallBack) && !(0, _common.isFunction)(successCallBack)) {\n        throw new Error(\"firebase.database().ref().once(_, *) 'successCallBack' must be a function.\");\n      }\n\n      if (!(0, _common.isUndefined)(failureCallbackOrContext) && !(0, _common.isObject)(failureCallbackOrContext) && !(0, _common.isFunction)(failureCallbackOrContext)) {\n        throw new Error(\"firebase.database().ref().once(_, _, *) 'failureCallbackOrContext' must be a function or context.\");\n      }\n\n      if (!(0, _common.isUndefined)(context) && !(0, _common.isObject)(context)) {\n        throw new Error(\"firebase.database().ref().once(_, _, _, *) 'context' must be a context object.\");\n      }\n\n      var modifiers = this._modifiers._copy().toArray();\n\n      return this._database.native.once(this.path, modifiers, eventType).then(function (result) {\n        var dataSnapshot;\n        var previousChildName;\n\n        if (eventType === 'value') {\n          dataSnapshot = new _DatabaseDataSnapshot.default(_this2.ref, result);\n        } else {\n          dataSnapshot = new _DatabaseDataSnapshot.default(_this2.ref, result.snapshot);\n          previousChildName = result.previousChildName;\n        }\n\n        if ((0, _common.isFunction)(successCallBack)) {\n          if ((0, _common.isObject)(failureCallbackOrContext)) {\n            successCallBack.bind(failureCallbackOrContext)(dataSnapshot, previousChildName);\n          } else if ((0, _common.isObject)(context)) {\n            successCallBack.bind(context)(dataSnapshot, previousChildName);\n          } else {\n            successCallBack(dataSnapshot, previousChildName);\n          }\n        }\n\n        return dataSnapshot;\n      }).catch(function (error) {\n        if ((0, _common.isFunction)(failureCallbackOrContext)) {\n          failureCallbackOrContext(error);\n        }\n\n        return Promise.reject(error);\n      });\n    }\n  }, {\n    key: \"orderByChild\",\n    value: function orderByChild(path) {\n      if (!(0, _common.isString)(path)) {\n        throw new Error(\"firebase.database().ref().orderByChild(*) 'path' must be a string value.\");\n      }\n\n      if ((0, _common.pathIsEmpty)(path)) {\n        throw new Error(\"firebase.database().ref().orderByChild(*) 'path' cannot be empty. Use orderByValue instead.\");\n      }\n\n      if (this._modifiers.hasOrderBy()) {\n        throw new Error(\"firebase.database().ref().orderByChild(*) You can't combine multiple orderBy calls.\");\n      }\n\n      var modifiers = this._modifiers._copy().orderByChild(path);\n\n      modifiers.validateModifiers('firebase.database().ref().orderByChild()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"orderByKey\",\n    value: function orderByKey() {\n      if (this._modifiers.hasOrderBy()) {\n        throw new Error(\"firebase.database().ref().orderByKey() You can't combine multiple orderBy calls.\");\n      }\n\n      var modifiers = this._modifiers._copy().orderByKey();\n\n      modifiers.validateModifiers('firebase.database().ref().orderByKey()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"orderByPriority\",\n    value: function orderByPriority() {\n      if (this._modifiers.hasOrderBy()) {\n        throw new Error(\"firebase.database().ref().orderByPriority() You can't combine multiple orderBy calls.\");\n      }\n\n      var modifiers = this._modifiers._copy().orderByPriority();\n\n      modifiers.validateModifiers('firebase.database().ref().orderByPriority()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"orderByValue\",\n    value: function orderByValue() {\n      if (this._modifiers.hasOrderBy()) {\n        throw new Error(\"firebase.database().ref().orderByValue() You can't combine multiple orderBy calls.\");\n      }\n\n      var modifiers = this._modifiers._copy().orderByValue();\n\n      modifiers.validateModifiers('firebase.database().ref().orderByValue()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"startAt\",\n    value: function startAt(value, key) {\n      if (!(0, _common.isNumber)(value) && !(0, _common.isString)(value) && !(0, _common.isBoolean)(value) && !(0, _common.isNull)(value)) {\n        throw new Error(\"firebase.database().ref().startAt(*) 'value' must be a number, string, boolean or null value.\");\n      }\n\n      if (!(0, _common.isUndefined)(key) && !(0, _common.isString)(key)) {\n        throw new Error(\"firebase.database().ref().startAt(_, *) 'key' must be a string value if defined.\");\n      }\n\n      if (this._modifiers.hasStartAt()) {\n        throw new Error('firebase.database().ref().startAt() Starting point was already set (by another call to startAt or equalTo).');\n      }\n\n      var modifiers = this._modifiers._copy().startAt(value, key);\n\n      modifiers.validateModifiers('firebase.database().ref().startAt()');\n      return new DatabaseQuery(this._database, this.path, modifiers);\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return this.toString();\n    }\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return \"\" + this._database._customUrlOrRegion + (0, _common.pathToUrlEncodedString)(this.path);\n    }\n  }, {\n    key: \"keepSynced\",\n    value: function keepSynced(bool) {\n      if (!(0, _common.isBoolean)(bool)) {\n        throw new Error(\"firebase.database().ref().keepSynced(*) 'bool' value must be a boolean value.\");\n      }\n\n      return this._database.native.keepSynced(this._generateQueryKey(), this.path, this._modifiers.toArray(), bool);\n    }\n  }, {\n    key: \"_generateQueryKey\",\n    value: function _generateQueryKey() {\n      return \"$\" + this._database._customUrlOrRegion + \"$/\" + this.path + \"$\" + this._database.app.name + \"$\" + this._modifiers.toString();\n    }\n  }, {\n    key: \"_generateQueryEventKey\",\n    value: function _generateQueryEventKey(eventType) {\n      return this._generateQueryKey() + \"$\" + listeners + \"$\" + eventType;\n    }\n  }, {\n    key: \"ref\",\n    get: function get() {\n      return new DatabaseReference(this._database, this.path);\n    }\n  }]);\n  return DatabaseQuery;\n}(_common.ReferenceBase);\n\nexports.default = DatabaseQuery;","map":{"version":3,"sources":["C:/Users/mysiew/Documents/eCommerce/codecanyon-xPJMYS8x-react-native-delivery-solution-with-advance-website-and-cms/SourceCode/vesend-consumer-app-master/node_modules/@react-native-firebase/database/lib/DatabaseQuery.js"],"names":["eventTypes","DatabaseReference","provideReferenceClass","databaseReference","listeners","DatabaseQuery","database","path","modifiers","_database","_modifiers","value","key","Error","hasEndAt","_copy","endAt","validateModifiers","hasStartAt","startAt","other","sameApp","app","sameDatabasePath","toString","sameModifiers","limit","isValidLimit","hasLimit","limitToFirst","limitToLast","eventType","callback","context","arguments","length","DatabaseSyncTree","removeListenersForRegistrations","getRegistrationsByPath","includes","join","registration","getOneByPathEventListener","removeListenerRegistrations","registrations","getRegistrationsByPathEvent","cancelCallbackOrContext","queryKey","_generateQueryKey","eventRegistrationKey","_generateQueryEventKey","registrationCancellationKey","_context","addRegistration","ref","appName","name","dbURL","_customUrlOrRegion","listener","bind","once","native","on","toArray","hasCancellationCallback","successCallBack","failureCallbackOrContext","then","result","dataSnapshot","previousChildName","DatabaseDataSnapshot","snapshot","catch","error","Promise","reject","hasOrderBy","orderByChild","orderByKey","orderByPriority","orderByValue","bool","keepSynced","ReferenceBase"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isBoolean,\n  isFunction,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  pathIsEmpty,\n  pathToUrlEncodedString,\n  ReferenceBase,\n} from '@react-native-firebase/app/lib/common';\nimport DatabaseDataSnapshot from './DatabaseDataSnapshot';\nimport DatabaseSyncTree from './DatabaseSyncTree';\n\nconst eventTypes = ['value', 'child_added', 'child_changed', 'child_moved', 'child_removed'];\n\n// To avoid React Native require cycle warnings\nlet DatabaseReference = null;\nexport function provideReferenceClass(databaseReference) {\n  DatabaseReference = databaseReference;\n}\n\n// Internal listener count\nlet listeners = 0;\n\nexport default class DatabaseQuery extends ReferenceBase {\n  constructor(database, path, modifiers) {\n    super(path);\n    this._database = database;\n    this._modifiers = modifiers;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#endat\n   */\n  get ref() {\n    return new DatabaseReference(this._database, this.path);\n  }\n\n  /**\n   *\n   * @param value\n   * @param key\n   * @return {DatabaseQuery}\n   */\n  endAt(value, key) {\n    if (!isNumber(value) && !isString(value) && !isBoolean(value) && !isNull(value)) {\n      throw new Error(\n        \"firebase.database().ref().endAt(*) 'value' must be a number, string, boolean or null value.\",\n      );\n    }\n\n    if (!isUndefined(key) && !isString(key)) {\n      throw new Error(\n        \"firebase.database().ref().endAt(_, *) 'key' must be a string value if defined.\",\n      );\n    }\n\n    if (this._modifiers.hasEndAt()) {\n      throw new Error(\n        'firebase.database().ref().endAt() Ending point was already set (by another call to endAt or equalTo).',\n      );\n    }\n\n    const modifiers = this._modifiers._copy().endAt(value, key);\n    modifiers.validateModifiers('firebase.database().ref().endAt()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  /**\n   *\n   * @param value\n   * @param key\n   * @return {DatabaseQuery}\n   */\n  equalTo(value, key) {\n    if (!isNumber(value) && !isString(value) && !isBoolean(value) && !isNull(value)) {\n      throw new Error(\n        \"firebase.database().ref().equalTo(*) 'value' must be a number, string, boolean or null value.\",\n      );\n    }\n\n    if (!isUndefined(key) && !isString(key)) {\n      throw new Error(\n        \"firebase.database().ref().equalTo(_, *) 'key' must be a string value if defined.\",\n      );\n    }\n\n    if (this._modifiers.hasStartAt()) {\n      throw new Error(\n        'firebase.database().ref().equalTo() Starting point was already set (by another call to startAt or equalTo).',\n      );\n    }\n\n    if (this._modifiers.hasEndAt()) {\n      throw new Error(\n        'firebase.database().ref().equalTo() Ending point was already set (by another call to endAt or equalTo).',\n      );\n    }\n\n    return this.startAt(value, key).endAt(value, key);\n  }\n\n  /**\n   *\n   * @param other\n   * @return {boolean}\n   */\n  isEqual(other) {\n    if (!(other instanceof DatabaseQuery)) {\n      throw new Error(\"firebase.database().ref().isEqual(*) 'other' must be an instance of Query.\");\n    }\n\n    const sameApp = other._database.app === this._database.app;\n    const sameDatabasePath = other.toString() === this.toString();\n    const sameModifiers = other._modifiers.toString() === this._modifiers.toString();\n\n    return sameApp && sameDatabasePath && sameModifiers;\n  }\n\n  /**\n   *\n   * @param limit\n   * @return {DatabaseQuery}\n   */\n  limitToFirst(limit) {\n    if (this._modifiers.isValidLimit(limit)) {\n      throw new Error(\n        \"firebase.database().ref().limitToFirst(*) 'limit' must be a positive integer value.\",\n      );\n    }\n\n    if (this._modifiers.hasLimit()) {\n      throw new Error(\n        'firebase.database().ref().limitToFirst(*) Limit was already set (by another call to limitToFirst, or limitToLast)',\n      );\n    }\n\n    return new DatabaseQuery(\n      this._database,\n      this.path,\n      this._modifiers._copy().limitToFirst(limit),\n    );\n  }\n\n  /**\n   *\n   * @param limit\n   * @return {DatabaseQuery}\n   */\n  limitToLast(limit) {\n    if (this._modifiers.isValidLimit(limit)) {\n      throw new Error(\n        \"firebase.database().ref().limitToLast(*) 'limit' must be a positive integer value.\",\n      );\n    }\n\n    if (this._modifiers.hasLimit()) {\n      throw new Error(\n        'firebase.database().ref().limitToLast(*) Limit was already set (by another call to limitToFirst, or limitToLast)',\n      );\n    }\n\n    return new DatabaseQuery(this._database, this.path, this._modifiers._copy().limitToLast(limit));\n  }\n\n  /**\n   *\n   * @param eventType\n   * @param callback\n   * @param context\n   * @return {DatabaseQuery}\n   */\n  off(eventType, callback, context) {\n    //\n    if (arguments.length === 0) {\n      // Firebase Docs:\n      //    if no eventType or callback is specified, all callbacks for the Reference will be removed\n      return DatabaseSyncTree.removeListenersForRegistrations(\n        DatabaseSyncTree.getRegistrationsByPath(this.path),\n      );\n    }\n\n    if (!isUndefined(eventType) && !eventTypes.includes(eventType)) {\n      throw new Error(\n        `firebase.database().ref().off(*) 'eventType' must be one of ${eventTypes.join(', ')}.`,\n      );\n    }\n\n    if (!isUndefined(callback) && !isFunction(callback)) {\n      throw new Error(\"firebase.database().ref().off(_, *) 'callback' must be a function.\");\n    }\n\n    if (!isUndefined(context) && !isObject(context)) {\n      throw new Error(\"firebase.database().ref().off(_, _, *) 'context' must be an object.\");\n    }\n\n    // Firebase Docs:\n    //     Note that if on() was called\n    //     multiple times with the same eventType and callback, the callback will be called\n    //     multiple times for each event, and off() must be called multiple times to\n    //     remove the callback.\n\n    // Remove only a single registration\n    if (eventType && callback) {\n      const registration = DatabaseSyncTree.getOneByPathEventListener(\n        this.path,\n        eventType,\n        callback,\n      );\n      if (!registration) {\n        return [];\n      }\n\n      // remove the paired cancellation registration if any exist\n      DatabaseSyncTree.removeListenersForRegistrations([`${registration}$cancelled`]);\n\n      // remove only the first registration to match firebase web sdk\n      // call multiple times to remove multiple registrations\n      return DatabaseSyncTree.removeListenerRegistrations(callback, [registration]);\n    }\n\n    // Firebase Docs:\n    //     If a callback is not specified, all callbacks for the specified eventType will be removed.\n    const registrations = DatabaseSyncTree.getRegistrationsByPathEvent(this.path, eventType);\n\n    DatabaseSyncTree.removeListenersForRegistrations(\n      DatabaseSyncTree.getRegistrationsByPathEvent(this.path, `${eventType}$cancelled`),\n    );\n\n    return DatabaseSyncTree.removeListenersForRegistrations(registrations);\n  }\n\n  /**\n   *\n   * @param eventType\n   * @param callback\n   * @param cancelCallbackOrContext\n   * @param context\n   * @return {DatabaseQuery}\n   */\n  on(eventType, callback, cancelCallbackOrContext, context) {\n    if (!eventTypes.includes(eventType)) {\n      throw new Error(\n        `firebase.database().ref().on(*) 'eventType' must be one of ${eventTypes.join(', ')}.`,\n      );\n    }\n\n    if (!isFunction(callback)) {\n      throw new Error(\"firebase.database().ref().on(_, *) 'callback' must be a function.\");\n    }\n\n    if (\n      !isUndefined(cancelCallbackOrContext) &&\n      !isFunction(cancelCallbackOrContext) &&\n      !isObject(cancelCallbackOrContext)\n    ) {\n      throw new Error(\n        \"firebase.database().ref().on(_, _, *) 'cancelCallbackOrContext' must be a function or object.\",\n      );\n    }\n\n    if (!isUndefined(context) && !isObject(context)) {\n      throw new Error(\"firebase.database().ref().on(_, _, _, *) 'context' must be an object.\");\n    }\n\n    const queryKey = this._generateQueryKey();\n    const eventRegistrationKey = this._generateQueryEventKey(eventType);\n    const registrationCancellationKey = `${eventRegistrationKey}$cancelled`;\n    const _context =\n      cancelCallbackOrContext && !isFunction(cancelCallbackOrContext)\n        ? cancelCallbackOrContext\n        : context;\n\n    // Add a new SyncTree registration\n    DatabaseSyncTree.addRegistration({\n      eventType,\n      ref: this.ref,\n      path: this.path,\n      key: queryKey,\n      appName: this._database.app.name,\n      dbURL: this._database._customUrlOrRegion,\n      eventRegistrationKey,\n      listener: _context ? callback.bind(_context) : callback,\n    });\n\n    if (cancelCallbackOrContext && isFunction(cancelCallbackOrContext)) {\n      // cancellations have their own separate registration\n      // as these are one off events, and they're not guaranteed\n      // to occur either, only happens on failure to register on native\n\n      DatabaseSyncTree.addRegistration({\n        ref: this.ref,\n        once: true,\n        path: this.path,\n        key: queryKey,\n        appName: this._database.app.name,\n        dbURL: this._database._customUrlOrRegion,\n        eventType: `${eventType}$cancelled`,\n        eventRegistrationKey: registrationCancellationKey,\n        listener: _context ? cancelCallbackOrContext.bind(_context) : cancelCallbackOrContext,\n      });\n    }\n\n    this._database.native.on({\n      eventType,\n      path: this.path,\n      key: queryKey,\n      appName: this._database.app.name,\n      modifiers: this._modifiers.toArray(),\n      hasCancellationCallback: isFunction(cancelCallbackOrContext),\n      registration: {\n        eventRegistrationKey,\n        key: queryKey,\n        registrationCancellationKey,\n      },\n    });\n\n    // increment number of listeners - just a short way of making\n    // every registration unique per .on() call\n    listeners += 1;\n\n    return callback;\n  }\n\n  /**\n   * @param eventType\n   * @param successCallBack\n   * @param failureCallbackOrContext\n   * @param context\n   */\n  once(eventType, successCallBack, failureCallbackOrContext, context) {\n    if (!eventTypes.includes(eventType)) {\n      throw new Error(\n        `firebase.database().ref().once(*) 'eventType' must be one of ${eventTypes.join(', ')}.`,\n      );\n    }\n\n    if (!isUndefined(successCallBack) && !isFunction(successCallBack)) {\n      throw new Error(\"firebase.database().ref().once(_, *) 'successCallBack' must be a function.\");\n    }\n\n    if (\n      !isUndefined(failureCallbackOrContext) &&\n      !isObject(failureCallbackOrContext) &&\n      !isFunction(failureCallbackOrContext)\n    ) {\n      throw new Error(\n        \"firebase.database().ref().once(_, _, *) 'failureCallbackOrContext' must be a function or context.\",\n      );\n    }\n\n    if (!isUndefined(context) && !isObject(context)) {\n      throw new Error(\n        \"firebase.database().ref().once(_, _, _, *) 'context' must be a context object.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().toArray();\n\n    return this._database.native\n      .once(this.path, modifiers, eventType)\n      .then(result => {\n        let dataSnapshot;\n        let previousChildName;\n\n        // Child based events return a previousChildName\n        if (eventType === 'value') {\n          dataSnapshot = new DatabaseDataSnapshot(this.ref, result);\n        } else {\n          dataSnapshot = new DatabaseDataSnapshot(this.ref, result.snapshot);\n          previousChildName = result.previousChildName;\n        }\n\n        if (isFunction(successCallBack)) {\n          if (isObject(failureCallbackOrContext)) {\n            successCallBack.bind(failureCallbackOrContext)(dataSnapshot, previousChildName);\n          } else if (isObject(context)) {\n            successCallBack.bind(context)(dataSnapshot, previousChildName);\n          } else {\n            successCallBack(dataSnapshot, previousChildName);\n          }\n        }\n\n        return dataSnapshot;\n      })\n      .catch(error => {\n        if (isFunction(failureCallbackOrContext)) {\n          failureCallbackOrContext(error);\n        }\n        return Promise.reject(error);\n      });\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#orderbychild\n   */\n  orderByChild(path) {\n    if (!isString(path)) {\n      throw new Error(\"firebase.database().ref().orderByChild(*) 'path' must be a string value.\");\n    }\n\n    if (pathIsEmpty(path)) {\n      throw new Error(\n        \"firebase.database().ref().orderByChild(*) 'path' cannot be empty. Use orderByValue instead.\",\n      );\n    }\n\n    if (this._modifiers.hasOrderBy()) {\n      throw new Error(\n        \"firebase.database().ref().orderByChild(*) You can't combine multiple orderBy calls.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderByChild(path);\n    modifiers.validateModifiers('firebase.database().ref().orderByChild()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#orderbykey\n   */\n  orderByKey() {\n    if (this._modifiers.hasOrderBy()) {\n      throw new Error(\n        \"firebase.database().ref().orderByKey() You can't combine multiple orderBy calls.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderByKey();\n    modifiers.validateModifiers('firebase.database().ref().orderByKey()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#orderbypriority\n   */\n  orderByPriority() {\n    if (this._modifiers.hasOrderBy()) {\n      throw new Error(\n        \"firebase.database().ref().orderByPriority() You can't combine multiple orderBy calls.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderByPriority();\n    modifiers.validateModifiers('firebase.database().ref().orderByPriority()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Query.html#orderbyvalue\n   */\n  orderByValue() {\n    if (this._modifiers.hasOrderBy()) {\n      throw new Error(\n        \"firebase.database().ref().orderByValue() You can't combine multiple orderBy calls.\",\n      );\n    }\n\n    const modifiers = this._modifiers._copy().orderByValue();\n    modifiers.validateModifiers('firebase.database().ref().orderByValue()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  startAt(value, key) {\n    if (!isNumber(value) && !isString(value) && !isBoolean(value) && !isNull(value)) {\n      throw new Error(\n        \"firebase.database().ref().startAt(*) 'value' must be a number, string, boolean or null value.\",\n      );\n    }\n\n    if (!isUndefined(key) && !isString(key)) {\n      throw new Error(\n        \"firebase.database().ref().startAt(_, *) 'key' must be a string value if defined.\",\n      );\n    }\n\n    if (this._modifiers.hasStartAt()) {\n      throw new Error(\n        'firebase.database().ref().startAt() Starting point was already set (by another call to startAt or equalTo).',\n      );\n    }\n\n    const modifiers = this._modifiers._copy().startAt(value, key);\n    modifiers.validateModifiers('firebase.database().ref().startAt()');\n\n    return new DatabaseQuery(this._database, this.path, modifiers);\n  }\n\n  toJSON() {\n    return this.toString();\n  }\n\n  toString() {\n    return `${this._database._customUrlOrRegion}${pathToUrlEncodedString(this.path)}`;\n  }\n\n  keepSynced(bool) {\n    if (!isBoolean(bool)) {\n      throw new Error(\n        \"firebase.database().ref().keepSynced(*) 'bool' value must be a boolean value.\",\n      );\n    }\n\n    return this._database.native.keepSynced(\n      this._generateQueryKey(),\n      this.path,\n      this._modifiers.toArray(),\n      bool,\n    );\n  }\n\n  // Generates a unique string for a query\n  // Ensures any queries called in various orders keep the same key\n  _generateQueryKey() {\n    return `$${this._database._customUrlOrRegion}$/${this.path}$${\n      this._database.app.name\n    }$${this._modifiers.toString()}`;\n  }\n\n  // Generates a unique event registration key\n  _generateQueryEventKey(eventType) {\n    return `${this._generateQueryKey()}$${listeners}$${eventType}`;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}