{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = exports.AndroidMarket = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar AppleNativePrefix = 'itms-apps://itunes.apple.com/app/id';\nvar AppleWebPrefix = 'https://itunes.apple.com/app/id';\nvar GooglePrefix = 'http://play.google.com/store/apps/details?id=';\nvar AmazonPrefix = 'amzn://apps/android?p=';\nvar AndroidMarket = {\n  Google: 1,\n  Amazon: 2,\n  Other: 3\n};\nexports.AndroidMarket = AndroidMarket;\n\nvar noop = function noop() {};\n\nvar Rate = function () {\n  function Rate() {\n    (0, _classCallCheck2.default)(this, Rate);\n  }\n\n  (0, _createClass2.default)(Rate, null, [{\n    key: \"filterOptions\",\n    value: function filterOptions(inputOptions) {\n      var options = {\n        AppleAppID: '',\n        GooglePackageName: '',\n        AmazonPackageName: '',\n        OtherAndroidURL: '',\n        preferredAndroidMarket: AndroidMarket.Google,\n        preferInApp: false,\n        openAppStoreIfInAppFails: true,\n        inAppDelay: 3.0,\n        fallbackPlatformURL: ''\n      };\n      Object.keys(inputOptions).forEach(function (key) {\n        options[key] = inputOptions[key];\n      });\n      return options;\n    }\n  }, {\n    key: \"rate\",\n    value: function rate(inputOptions) {\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n      var RNRate = _reactNative.NativeModules.RNRate;\n      var options = Rate.filterOptions(inputOptions);\n\n      if (_reactNative.Platform.OS === 'ios') {\n        options.AppleNativePrefix = AppleNativePrefix;\n        RNRate.rate(options, function (response) {\n          callback(response);\n        });\n      } else if (_reactNative.Platform.OS === 'android') {\n        if (options.preferredAndroidMarket === AndroidMarket.Google) {\n          if (options.preferInApp) {\n            RNRate.rate(options, function (response) {\n              if (!response && options.openAppStoreIfInAppFails) {\n                Rate.openURL(GooglePrefix + options.GooglePackageName, callback);\n              } else {\n                callback(response);\n              }\n            });\n          } else {\n            Rate.openURL(GooglePrefix + options.GooglePackageName, callback);\n          }\n        } else if (options.preferredAndroidMarket === AndroidMarket.Amazon) {\n          Rate.openURL(AmazonPrefix + options.AmazonPackageName, callback);\n        } else if (options.preferredAndroidMarket === AndroidMarket.Other) {\n          Rate.openURL(options.OtherAndroidURL, callback);\n        }\n      } else {\n        Rate.openURL(options.fallbackPlatformURL, callback);\n      }\n    }\n  }, {\n    key: \"openURL\",\n    value: function openURL(url) {\n      var callback = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : noop;\n\n      _reactNative.Linking.canOpenURL(url).then(function (supported) {\n        callback(supported);\n\n        if (supported) {\n          _reactNative.Linking.openURL(url);\n        }\n      });\n    }\n  }]);\n  return Rate;\n}();\n\nexports.default = Rate;","map":{"version":3,"sources":["C:/Users/mysiew/Documents/eCommerce/codecanyon-xPJMYS8x-react-native-delivery-solution-with-advance-website-and-cms/SourceCode/vesend-consumer-app-master/node_modules/react-native-rate/index.js"],"names":["AppleNativePrefix","AppleWebPrefix","GooglePrefix","AmazonPrefix","AndroidMarket","Google","Amazon","Other","noop","Rate","inputOptions","options","AppleAppID","GooglePackageName","AmazonPackageName","OtherAndroidURL","preferredAndroidMarket","preferInApp","openAppStoreIfInAppFails","inAppDelay","fallbackPlatformURL","Object","keys","forEach","key","callback","RNRate","NativeModules","filterOptions","Platform","OS","rate","response","openURL","url","Linking","canOpenURL","then","supported"],"mappings":"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","sourcesContent":["import { Platform, Linking, NativeModules } from 'react-native'\n\nconst AppleNativePrefix = 'itms-apps://itunes.apple.com/app/id'\nconst AppleWebPrefix = 'https://itunes.apple.com/app/id'\nconst GooglePrefix = 'http://play.google.com/store/apps/details?id='\nconst AmazonPrefix = 'amzn://apps/android?p='\n\nexport const AndroidMarket = {\n  Google: 1,\n  Amazon: 2,\n  Other: 3,\n}\n\nconst noop = () => {}\n\nexport default class Rate {\n  static filterOptions(inputOptions) {\n    const options = {\n      AppleAppID: '',\n      GooglePackageName: '',\n      AmazonPackageName: '',\n      OtherAndroidURL: '',\n      preferredAndroidMarket: AndroidMarket.Google,\n      preferInApp: false,\n      openAppStoreIfInAppFails: true,\n      inAppDelay: 3.0,\n      fallbackPlatformURL: '',\n    }\n    Object.keys(inputOptions).forEach((key) => {\n      options[key] = inputOptions[key]\n    })\n    return options\n  }\n\n  static rate(inputOptions, callback = noop) {\n    const { RNRate } = NativeModules\n    const options = Rate.filterOptions(inputOptions)\n    if (Platform.OS === 'ios') {\n      options.AppleNativePrefix = AppleNativePrefix\n      RNRate.rate(options, (response) => {\n        callback(response) // error?\n      })\n    } else if (Platform.OS === 'android') {\n      if (options.preferredAndroidMarket === AndroidMarket.Google) {\n        if (options.preferInApp) {\n          RNRate.rate(options, response=>{\n            if (!response && options.openAppStoreIfInAppFails) {\n              Rate.openURL(GooglePrefix + options.GooglePackageName, callback)\n            } else {\n              callback(response)\n            }\n          })\n        } else {\n          Rate.openURL(GooglePrefix + options.GooglePackageName, callback)\n        }\n      } else if (options.preferredAndroidMarket === AndroidMarket.Amazon) {\n        Rate.openURL(AmazonPrefix + options.AmazonPackageName, callback)\n      } else if (options.preferredAndroidMarket === AndroidMarket.Other) {\n        Rate.openURL(options.OtherAndroidURL, callback)\n      }\n    } else {\n      Rate.openURL(options.fallbackPlatformURL, callback)\n    }\n  }\n\n  static openURL(url, callback = noop) {\n    Linking.canOpenURL(url).then((supported) => {\n      callback(supported)\n      if (supported) {\n        Linking.openURL(url)\n      }\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}