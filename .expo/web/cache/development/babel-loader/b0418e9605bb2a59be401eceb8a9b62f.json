{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nvar _exportNames = {\n  configure: true,\n  fetch: true,\n  addEventListener: true,\n  useNetInfo: true\n};\nexports.configure = configure;\nexports.fetch = fetch;\nexports.addEventListener = addEventListener;\nexports.useNetInfo = useNetInfo;\nexports.default = void 0;\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _objectSpread2 = _interopRequireDefault(require(\"@babel/runtime/helpers/objectSpread\"));\n\nvar _react = require(\"react\");\n\nvar _defaultConfiguration = _interopRequireDefault(require(\"./internal/defaultConfiguration\"));\n\nvar _state2 = _interopRequireDefault(require(\"./internal/state\"));\n\nvar Types = _interopRequireWildcard(require(\"./internal/types\"));\n\nObject.keys(Types).forEach(function (key) {\n  if (key === \"default\" || key === \"__esModule\") return;\n  if (Object.prototype.hasOwnProperty.call(_exportNames, key)) return;\n  if (key in exports && exports[key] === Types[key]) return;\n  Object.defineProperty(exports, key, {\n    enumerable: true,\n    get: function get() {\n      return Types[key];\n    }\n  });\n});\nvar _configuration = _defaultConfiguration.default;\nvar _state = null;\n\nvar createState = function createState() {\n  return new _state2.default(_configuration);\n};\n\nfunction configure(configuration) {\n  _configuration = (0, _objectSpread2.default)({}, _defaultConfiguration.default, configuration);\n\n  if (_state) {\n    _state.tearDown();\n\n    _state = createState();\n  }\n}\n\nfunction fetch(requestedInterface) {\n  if (!_state) {\n    _state = createState();\n  }\n\n  return _state.latest(requestedInterface);\n}\n\nfunction addEventListener(listener) {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n\n  return function () {\n    _state && _state.remove(listener);\n  };\n}\n\nfunction useNetInfo(configuration) {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  var _useState = (0, _react.useState)({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: false,\n    isInternetReachable: false,\n    details: null\n  }),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      netInfo = _useState2[0],\n      setNetInfo = _useState2[1];\n\n  (0, _react.useEffect)(function () {\n    return addEventListener(setNetInfo);\n  }, []);\n  return netInfo;\n}\n\nvar _default = {\n  configure: configure,\n  fetch: fetch,\n  addEventListener: addEventListener,\n  useNetInfo: useNetInfo\n};\nexports.default = _default;","map":{"version":3,"sources":["index.ts"],"names":["_configuration","_state","createState","configure","netInfo","setNetInfo","useState","type","Types","isConnected","isInternetReachable","details","useEffect","addEventListener","fetch","useNetInfo"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AASA;;AACA;;AACA;;AACA;;AAkGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA/FA,IAAIA,cAA0C,GAA9C,6BAAA;AAGA,IAAIC,MAAoB,GAAxB,IAAA;;AACA,IAAMC,WAAW,GAAXA,SAAAA,WAAAA,GAA2B;AAC/B,SAAO,IAAA,eAAA,CAAP,cAAO,CAAP;AADF,CAAA;;AAWO,SAAA,SAAA,CAAA,aAAA,EAEC;AACNF,EAAAA,cAAc,GAAA,4BAAA,EAAA,EAAA,6BAAA,EAAdA,aAAc,CAAdA;;AAKA,MAAA,MAAA,EAAY;AACVC,IAAAA,MAAM,CAANA,QAAAA;;AACAA,IAAAA,MAAM,GAAGC,WAATD,EAAAA;AAEH;AASD;;AAAO,SAAA,KAAA,CAAA,kBAAA,EAEwB;AAC7B,MAAI,CAAJ,MAAA,EAAa;AACXA,IAAAA,MAAM,GAAGC,WAATD,EAAAA;AAEF;;AAAA,SAAOA,MAAM,CAANA,MAAAA,CAAP,kBAAOA,CAAP;AAcF;;AAAO,SAAA,gBAAA,CAAA,QAAA,EAEsB;AAC3B,MAAI,CAAJ,MAAA,EAAa;AACXA,IAAAA,MAAM,GAAGC,WAATD,EAAAA;AAGFA;;AAAAA,EAAAA,MAAM,CAANA,GAAAA,CAAAA,QAAAA;;AACA,SAAO,YAAY;AACjBA,IAAAA,MAAM,IAAIA,MAAM,CAANA,MAAAA,CAAVA,QAAUA,CAAVA;AADF,GAAA;AAUF;;AAAO,SAAA,UAAA,CAAA,aAAA,EAEe;AACpB,MAAA,aAAA,EAAmB;AACjBE,IAAAA,SAAS,CAATA,aAAS,CAATA;AAFkB;;AAAA,MAAA,SAAA,GAKUG,qBAA6B;AACzDC,IAAAA,IAAI,EAAEC,KAAK,CAALA,gBAAAA,CADmD,OAAA;AAEzDC,IAAAA,WAAW,EAF8C,KAAA;AAGzDC,IAAAA,mBAAmB,EAHsC,KAAA;AAIzDC,IAAAA,OAAO,EATW;AAKuC,GAA7BL,CALV;AAAA,MAAA,UAAA,GAAA,6BAAA,SAAA,EAAA,CAAA,CAAA;AAAA,MAKbF,OALa,GAAA,UAAA,CAAA,CAAA,CAAA;AAAA,MAKJC,UALI,GAAA,UAAA,CAAA,CAAA,CAAA;;AAYpBO,wBAAU,YAAoB;AAC5B,WAAOC,gBAAgB,CAAvB,UAAuB,CAAvB;AADO,GAATD,EAAAA,EAAAA;AAIA,SAAA,OAAA;AAGF;;eAEe;AACbT,EAAAA,SAAS,EADI,SAAA;AAEbW,EAAAA,KAAK,EAFQ,KAAA;AAGbD,EAAAA,gBAAgB,EAHH,gBAAA;AAIbE,EAAAA,UAAU,EAJZ;AAAe,C","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n */\n\nimport {useState, useEffect} from 'react';\nimport DEFAULT_CONFIGURATION from './internal/defaultConfiguration';\nimport State from './internal/state';\nimport * as Types from './internal/types';\n\n// Stores the currently used configuration\nlet _configuration: Types.NetInfoConfiguration = DEFAULT_CONFIGURATION;\n\n// Stores the singleton reference to the state manager\nlet _state: State | null = null;\nconst createState = (): State => {\n  return new State(_configuration);\n};\n\n/**\n * Configures the library with the given configuration. Note that calling this will stop all\n * previously added listeners from being called again. It is best to call this right when your\n * application is started to avoid issues.\n *\n * @param configuration The new configuration to set.\n */\nexport function configure(\n  configuration: Partial<Types.NetInfoConfiguration>,\n): void {\n  _configuration = {\n    ...DEFAULT_CONFIGURATION,\n    ...configuration,\n  };\n\n  if (_state) {\n    _state.tearDown();\n    _state = createState();\n  }\n}\n\n/**\n * Returns a `Promise` that resolves to a `NetInfoState` object.\n *\n * @param [requestedInterface] interface from which to obtain the information\n *\n * @returns A Promise which contains the current connection state.\n */\nexport function fetch(\n  requestedInterface?: string,\n): Promise<Types.NetInfoState> {\n  if (!_state) {\n    _state = createState();\n  }\n  return _state.latest(requestedInterface);\n}\n\n/**\n * Subscribe to connection information. The callback is called with a parameter of type\n * [`NetInfoState`](README.md#netinfostate) whenever the connection state changes. Your listener\n * will be called with the latest information soon after you subscribe and then with any\n * subsequent changes afterwards. You should not assume that the listener is called in the same\n * way across devices or platforms.\n *\n * @param listener The listener which is called when the network state changes.\n *\n * @returns A function which can be called to unsubscribe.\n */\nexport function addEventListener(\n  listener: Types.NetInfoChangeHandler,\n): Types.NetInfoSubscription {\n  if (!_state) {\n    _state = createState();\n  }\n\n  _state.add(listener);\n  return (): void => {\n    _state && _state.remove(listener);\n  };\n}\n\n/**\n * A React Hook which updates when the connection state changes.\n *\n * @returns The connection state.\n */\nexport function useNetInfo(\n  configuration?: Partial<Types.NetInfoConfiguration>,\n): Types.NetInfoState {\n  if (configuration) {\n    configure(configuration);\n  }\n\n  const [netInfo, setNetInfo] = useState<Types.NetInfoState>({\n    type: Types.NetInfoStateType.unknown,\n    isConnected: false,\n    isInternetReachable: false,\n    details: null,\n  });\n\n  useEffect((): (() => void) => {\n    return addEventListener(setNetInfo);\n  }, []);\n\n  return netInfo;\n}\n\nexport * from './internal/types';\n\nexport default {\n  configure,\n  fetch,\n  addEventListener,\n  useNetInfo,\n};\n"]},"metadata":{},"sourceType":"script"}