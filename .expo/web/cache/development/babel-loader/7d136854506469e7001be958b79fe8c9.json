{"ast":null,"code":"'use strict';\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _get2 = _interopRequireDefault(require(\"@babel/runtime/helpers/get\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _EventEmitter2 = _interopRequireDefault(require(\"../vendor/emitter/EventEmitter\"));\n\nvar _EventSubscriptionVendor = _interopRequireDefault(require(\"../vendor/emitter/_EventSubscriptionVendor\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction checkNativeEventModule(eventType) {\n  if (eventType) {\n    if (eventType.lastIndexOf('statusBar', 0) === 0) {\n      throw new Error('`' + eventType + '` event should be registered via the StatusBarIOS module');\n    }\n\n    if (eventType.lastIndexOf('keyboard', 0) === 0) {\n      throw new Error('`' + eventType + '` event should be registered via the Keyboard module');\n    }\n\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error('`' + eventType + '` event should be registered via the AppState module');\n    }\n  }\n}\n\nvar RCTDeviceEventEmitter = function (_EventEmitter) {\n  (0, _inherits2.default)(RCTDeviceEventEmitter, _EventEmitter);\n\n  var _super = _createSuper(RCTDeviceEventEmitter);\n\n  function RCTDeviceEventEmitter() {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, RCTDeviceEventEmitter);\n    var sharedSubscriber = new _EventSubscriptionVendor.default();\n    _this = _super.call(this, sharedSubscriber);\n    _this.sharedSubscriber = sharedSubscriber;\n    return _this;\n  }\n\n  (0, _createClass2.default)(RCTDeviceEventEmitter, [{\n    key: \"addListener\",\n    value: function addListener(eventType, listener, context) {\n      if (__DEV__) {\n        checkNativeEventModule(eventType);\n      }\n\n      return (0, _get2.default)((0, _getPrototypeOf2.default)(RCTDeviceEventEmitter.prototype), \"addListener\", this).call(this, eventType, listener, context);\n    }\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(eventType) {\n      if (__DEV__) {\n        checkNativeEventModule(eventType);\n      }\n\n      (0, _get2.default)((0, _getPrototypeOf2.default)(RCTDeviceEventEmitter.prototype), \"removeAllListeners\", this).call(this, eventType);\n    }\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(subscription) {\n      if (subscription.emitter !== this) {\n        subscription.emitter.removeSubscription(subscription);\n      } else {\n        (0, _get2.default)((0, _getPrototypeOf2.default)(RCTDeviceEventEmitter.prototype), \"removeSubscription\", this).call(this, subscription);\n      }\n    }\n  }]);\n  return RCTDeviceEventEmitter;\n}(_EventEmitter2.default);\n\nvar _default = new RCTDeviceEventEmitter();\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/mysiew/Documents/eCommerce/codecanyon-xPJMYS8x-react-native-delivery-solution-with-advance-website-and-cms/SourceCode/vesend-consumer-app-master/node_modules/react-native/Libraries/EventEmitter/RCTDeviceEventEmitter.js"],"names":["checkNativeEventModule","eventType","lastIndexOf","Error","RCTDeviceEventEmitter","sharedSubscriber","EventSubscriptionVendor","listener","context","__DEV__","subscription","emitter","removeSubscription","EventEmitter"],"mappings":"AAUA;;;;;;;;;;;;;;;;;;;;;AAEA;;AAEA;;;;;;AAEA,SAASA,sBAAT,CAAgCC,SAAhC,EAAoD;AAClD,MAAIA,SAAJ,EAAe;AACb,QAAIA,SAAS,CAACC,WAAV,CAAsB,WAAtB,EAAmC,CAAnC,MAA0C,CAA9C,EAAiD;AAC/C,YAAM,IAAIC,KAAJ,CACJ,MACEF,SADF,GAEE,0DAHE,CAAN;AAKD;;AACD,QAAIA,SAAS,CAACC,WAAV,CAAsB,UAAtB,EAAkC,CAAlC,MAAyC,CAA7C,EAAgD;AAC9C,YAAM,IAAIC,KAAJ,CACJ,MACEF,SADF,GAEE,sDAHE,CAAN;AAKD;;AACD,QAAIA,SAAS,KAAK,mBAAd,IAAqCA,SAAS,KAAK,eAAvD,EAAwE;AACtE,YAAM,IAAIE,KAAJ,CACJ,MACEF,SADF,GAEE,sDAHE,CAAN;AAKD;AACF;AACF;;IAMKG,qB;;;;;AAGJ,mCAAc;AAAA;;AAAA;AACZ,QAAMC,gBAAgB,GAAG,IAAIC,gCAAJ,EAAzB;AACA,8BAAMD,gBAAN;AACA,UAAKA,gBAAL,GAAwBA,gBAAxB;AAHY;AAIb;;;;gCAGCJ,S,EACAM,Q,EACAC,O,EACqB;AACrB,UAAIC,OAAJ,EAAa;AACXT,QAAAA,sBAAsB,CAACC,SAAD,CAAtB;AACD;;AACD,gIAAyBA,SAAzB,EAAoCM,QAApC,EAA8CC,OAA9C;AACD;;;uCAEkBP,S,EAAoB;AACrC,UAAIQ,OAAJ,EAAa;AACXT,QAAAA,sBAAsB,CAACC,SAAD,CAAtB;AACD;;AACD,gIAAyBA,SAAzB;AACD;;;uCAEkBS,Y,EAAmC;AACpD,UAAIA,YAAY,CAACC,OAAb,KAAyB,IAA7B,EAAmC;AACjCD,QAAAA,YAAY,CAACC,OAAb,CAAqBC,kBAArB,CAAwCF,YAAxC;AACD,OAFD,MAEO;AACL,kIAAyBA,YAAzB;AACD;AACF;;;EAjCiCG,sB;;eAoCpB,IAAIT,qBAAJ,E","sourcesContent":["/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n *\n * @format\n * @flow\n */\n\n'use strict';\n\nimport EventEmitter from '../vendor/emitter/EventEmitter';\nimport type EmitterSubscription from '../vendor/emitter/_EmitterSubscription';\nimport EventSubscriptionVendor from '../vendor/emitter/_EventSubscriptionVendor';\n\nfunction checkNativeEventModule(eventType: ?string) {\n  if (eventType) {\n    if (eventType.lastIndexOf('statusBar', 0) === 0) {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the StatusBarIOS module',\n      );\n    }\n    if (eventType.lastIndexOf('keyboard', 0) === 0) {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the Keyboard module',\n      );\n    }\n    if (eventType === 'appStateDidChange' || eventType === 'memoryWarning') {\n      throw new Error(\n        '`' +\n          eventType +\n          '` event should be registered via the AppState module',\n      );\n    }\n  }\n}\n\n/**\n * Deprecated - subclass NativeEventEmitter to create granular event modules instead of\n * adding all event listeners directly to RCTDeviceEventEmitter.\n */\nclass RCTDeviceEventEmitter extends EventEmitter {\n  sharedSubscriber: EventSubscriptionVendor;\n\n  constructor() {\n    const sharedSubscriber = new EventSubscriptionVendor();\n    super(sharedSubscriber);\n    this.sharedSubscriber = sharedSubscriber;\n  }\n\n  addListener(\n    eventType: string,\n    listener: Function,\n    context: ?Object,\n  ): EmitterSubscription {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    return super.addListener(eventType, listener, context);\n  }\n\n  removeAllListeners(eventType: ?string) {\n    if (__DEV__) {\n      checkNativeEventModule(eventType);\n    }\n    super.removeAllListeners(eventType);\n  }\n\n  removeSubscription(subscription: EmitterSubscription) {\n    if (subscription.emitter !== this) {\n      subscription.emitter.removeSubscription(subscription);\n    } else {\n      super.removeSubscription(subscription);\n    }\n  }\n}\n\nexport default (new RCTDeviceEventEmitter(): RCTDeviceEventEmitter);\n"]},"metadata":{},"sourceType":"script"}