{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.useOnMount = useOnMount;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _slicedToArray2 = _interopRequireDefault(require(\"@babel/runtime/helpers/slicedToArray\"));\n\nvar _react = require(\"react\");\n\nfunction useOnMount(asyncGetter, initialResult) {\n  var _useState = (0, _react.useState)({\n    loading: true,\n    result: initialResult\n  }),\n      _useState2 = (0, _slicedToArray2.default)(_useState, 2),\n      response = _useState2[0],\n      setResponse = _useState2[1];\n\n  (0, _react.useEffect)(function () {\n    var getAsync = function getAsync() {\n      var result;\n      return _regenerator.default.async(function getAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap(asyncGetter());\n\n            case 2:\n              result = _context.sent;\n              setResponse({\n                loading: false,\n                result: result\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n  return response;\n}","map":{"version":3,"sources":["asyncHookWrappers.ts"],"names":["useState","loading","result","initialResult","useEffect","getAsync","asyncGetter","setResponse"],"mappings":";;;;;;;;;;;AAAA;;AASO,SAAA,UAAA,CAAA,WAAA,EAAA,aAAA,EAA4F;AAAA,kBACjEA,qBAA6B;AAC3DC,IAAAA,OAAO,EADoD,IAAA;AAE3DC,IAAAA,MAAM,EAAEC;AAFmD,GAA7BH,CADiE;AAAA;AAAA,MAC3F,QAD2F;AAAA,MAC3F,WAD2F;;AAMjGI,wBAAU,YAAM;AAEd,QAAMC,QAAQ,GAAG,SAAXA,QAAW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gDACMC,WAArB,EADe;;AAAA;AACTJ,cAAAA,MADS;AAEfK,cAAAA,WAAW,CAAC;AAAEN,gBAAAA,OAAO,EAAT,KAAA;AAAkBC,gBAAAA,MAAAA,EAAAA;AAAlB,eAAD,CAAXK;;AAFe;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAjB;;AAKAF,IAAAA,QAAQ;AAPD,GAATD,EAQG,CARHA,WAQG,CARHA;AAUA,SAAA,QAAA;AACD","sourcesContent":["import { useState, useEffect } from 'react';\n\nimport { AsyncHookResult } from './types';\n\n/**\n * simple hook wrapper for async functions for 'on-mount / componentDidMount' that only need to fired once\n * @param asyncGetter async function that 'gets' something\n * @param initialResult -1 | false | 'unknown'\n */\nexport function useOnMount<T>(asyncGetter: () => Promise<T>, initialResult: T): AsyncHookResult<T> {\n  const [response, setResponse] = useState<AsyncHookResult<T>>({\n    loading: true,\n    result: initialResult,\n  });\n\n  useEffect(() => {\n    // async function cuz react complains if useEffect's effect param is an async function\n    const getAsync = async () => {\n      const result = await asyncGetter();\n      setResponse({ loading: false, result });\n    };\n\n    getAsync();\n  }, [asyncGetter]);\n\n  return response;\n}\n"]},"metadata":{},"sourceType":"script"}