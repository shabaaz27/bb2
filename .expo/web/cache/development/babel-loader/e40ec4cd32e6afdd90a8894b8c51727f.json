{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _extends2 = _interopRequireDefault(require(\"@babel/runtime/helpers/extends\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar _NativeFirebaseError = _interopRequireDefault(require(\"@react-native-firebase/app/lib/internal/NativeFirebaseError\"));\n\nvar _SharedEventEmitter = _interopRequireDefault(require(\"@react-native-firebase/app/lib/internal/SharedEventEmitter\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _DatabaseDataSnapshot = _interopRequireDefault(require(\"./DatabaseDataSnapshot\"));\n\nvar DatabaseSyncTree = function () {\n  function DatabaseSyncTree() {\n    (0, _classCallCheck2.default)(this, DatabaseSyncTree);\n    this._tree = {};\n    this._reverseLookup = {};\n\n    _SharedEventEmitter.default.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n  }\n\n  (0, _createClass2.default)(DatabaseSyncTree, [{\n    key: \"_handleSyncEvent\",\n    value: function _handleSyncEvent(event) {\n      var body = event.body;\n\n      if (body.error) {\n        this._handleErrorEvent(body);\n      } else {\n        this._handleValueEvent(body);\n      }\n    }\n  }, {\n    key: \"_handleErrorEvent\",\n    value: function _handleErrorEvent(event) {\n      var _event$registration = event.registration,\n          eventRegistrationKey = _event$registration.eventRegistrationKey,\n          registrationCancellationKey = _event$registration.registrationCancellationKey;\n      var registration = this.getRegistration(registrationCancellationKey);\n\n      if (registration) {\n        var error = _NativeFirebaseError.default.fromEvent(event.error, 'database');\n\n        _SharedEventEmitter.default.emit(registrationCancellationKey, error);\n\n        this.removeRegistration(eventRegistrationKey);\n      }\n    }\n  }, {\n    key: \"_handleValueEvent\",\n    value: function _handleValueEvent(event) {\n      var _event$registration2 = event.registration,\n          key = _event$registration2.key,\n          eventRegistrationKey = _event$registration2.eventRegistrationKey;\n      var registration = this.getRegistration(eventRegistrationKey);\n\n      if (!registration) {\n        return this.native.off(key, eventRegistrationKey);\n      }\n\n      var snapshot;\n      var previousChildName;\n\n      if (event.eventType === 'value') {\n        snapshot = new _DatabaseDataSnapshot.default(registration.ref, event.data);\n      } else {\n        snapshot = new _DatabaseDataSnapshot.default(registration.ref, event.data.snapshot);\n        previousChildName = event.data.previousChildName;\n      }\n\n      return _SharedEventEmitter.default.emit(eventRegistrationKey, snapshot, previousChildName);\n    }\n  }, {\n    key: \"getRegistration\",\n    value: function getRegistration(registration) {\n      return this._reverseLookup[registration] ? (0, _extends2.default)({}, this._reverseLookup[registration]) : null;\n    }\n  }, {\n    key: \"removeListenersForRegistrations\",\n    value: function removeListenersForRegistrations(registrations) {\n      if ((0, _common.isString)(registrations)) {\n        this.removeRegistration(registrations);\n\n        _SharedEventEmitter.default.removeAllListeners(registrations);\n\n        return 1;\n      }\n\n      if (!Array.isArray(registrations)) {\n        return 0;\n      }\n\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        this.removeRegistration(registrations[i]);\n\n        _SharedEventEmitter.default.removeAllListeners(registrations[i]);\n      }\n\n      return registrations.length;\n    }\n  }, {\n    key: \"removeListenerRegistrations\",\n    value: function removeListenerRegistrations(listener, registrations) {\n      if (!Array.isArray(registrations)) {\n        return [];\n      }\n\n      var removed = [];\n\n      for (var i = 0, len = registrations.length; i < len; i++) {\n        var registration = registrations[i];\n\n        var subscriptions = _SharedEventEmitter.default._subscriber.getSubscriptionsForType(registration);\n\n        if (subscriptions) {\n          for (var j = 0, l = subscriptions.length; j < l; j++) {\n            var subscription = subscriptions[j];\n\n            if (subscription && subscription.listener === listener) {\n              subscription.remove();\n              removed.push(registration);\n              this.removeRegistration(registration);\n            }\n          }\n        }\n      }\n\n      return removed;\n    }\n  }, {\n    key: \"getRegistrationsByPath\",\n    value: function getRegistrationsByPath(path) {\n      var out = [];\n      var eventKeys = Object.keys(this._tree[path] || {});\n\n      for (var i = 0, len = eventKeys.length; i < len; i++) {\n        Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n      }\n\n      return out;\n    }\n  }, {\n    key: \"getRegistrationsByPathEvent\",\n    value: function getRegistrationsByPathEvent(path, eventType) {\n      if (!this._tree[path]) {\n        return [];\n      }\n\n      if (!this._tree[path][eventType]) {\n        return [];\n      }\n\n      return Object.keys(this._tree[path][eventType]);\n    }\n  }, {\n    key: \"getOneByPathEventListener\",\n    value: function getOneByPathEventListener(path, eventType, listener) {\n      if (!this._tree[path]) {\n        return null;\n      }\n\n      if (!this._tree[path][eventType]) {\n        return null;\n      }\n\n      var registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n      for (var i = 0; i < registrationsForPathEvent.length; i++) {\n        var registration = registrationsForPathEvent[i];\n\n        if (registration[1] === listener) {\n          return registration[0];\n        }\n      }\n\n      return null;\n    }\n  }, {\n    key: \"addRegistration\",\n    value: function addRegistration(registration) {\n      var eventRegistrationKey = registration.eventRegistrationKey,\n          eventType = registration.eventType,\n          listener = registration.listener,\n          once = registration.once,\n          path = registration.path;\n\n      if (!this._tree[path]) {\n        this._tree[path] = {};\n      }\n\n      if (!this._tree[path][eventType]) {\n        this._tree[path][eventType] = {};\n      }\n\n      this._tree[path][eventType][eventRegistrationKey] = listener;\n      this._reverseLookup[eventRegistrationKey] = registration;\n\n      if (once) {\n        _SharedEventEmitter.default.once(eventRegistrationKey, this._onOnceRemoveRegistration(eventRegistrationKey, listener));\n      } else {\n        _SharedEventEmitter.default.addListener(eventRegistrationKey, listener);\n      }\n\n      return eventRegistrationKey;\n    }\n  }, {\n    key: \"removeRegistration\",\n    value: function removeRegistration(registration) {\n      if (!this._reverseLookup[registration]) {\n        return false;\n      }\n\n      var _this$_reverseLookup$ = this._reverseLookup[registration],\n          path = _this$_reverseLookup$.path,\n          eventType = _this$_reverseLookup$.eventType,\n          once = _this$_reverseLookup$.once;\n\n      if (!this._tree[path]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n\n      if (!this._tree[path][eventType]) {\n        delete this._reverseLookup[registration];\n        return false;\n      }\n\n      var registrationObj = this._reverseLookup[registration];\n\n      if (registrationObj && !once) {\n        this.native.off(registrationObj.key, registration);\n      }\n\n      delete this._tree[path][eventType][registration];\n      delete this._reverseLookup[registration];\n      return !!registrationObj;\n    }\n  }, {\n    key: \"_onOnceRemoveRegistration\",\n    value: function _onOnceRemoveRegistration(registration, listener) {\n      var _this = this;\n\n      return function () {\n        _this.removeRegistration(registration);\n\n        listener.apply(void 0, arguments);\n      };\n    }\n  }, {\n    key: \"native\",\n    get: function get() {\n      return _reactNative.NativeModules.RNFBDatabaseQueryModule;\n    }\n  }]);\n  return DatabaseSyncTree;\n}();\n\nvar _default = new DatabaseSyncTree();\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/mysiew/Documents/eCommerce/codecanyon-xPJMYS8x-react-native-delivery-solution-with-advance-website-and-cms/SourceCode/vesend-consumer-app-master/node_modules/@react-native-firebase/database/lib/DatabaseSyncTree.js"],"names":["DatabaseSyncTree","_tree","_reverseLookup","SharedEventEmitter","addListener","_handleSyncEvent","bind","event","body","error","_handleErrorEvent","_handleValueEvent","registration","eventRegistrationKey","registrationCancellationKey","getRegistration","NativeError","fromEvent","emit","removeRegistration","key","native","off","snapshot","previousChildName","eventType","DatabaseDataSnapshot","ref","data","registrations","removeAllListeners","Array","isArray","i","len","length","listener","removed","subscriptions","_subscriber","getSubscriptionsForType","j","l","subscription","remove","push","path","out","eventKeys","Object","keys","prototype","apply","registrationsForPathEvent","entries","once","_onOnceRemoveRegistration","registrationObj","NativeModules","RNFBDatabaseQueryModule"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { isString } from '@react-native-firebase/app/lib/common';\nimport NativeError from '@react-native-firebase/app/lib/internal/NativeFirebaseError';\nimport SharedEventEmitter from '@react-native-firebase/app/lib/internal/SharedEventEmitter';\nimport { NativeModules } from 'react-native';\nimport DatabaseDataSnapshot from './DatabaseDataSnapshot';\n\nclass DatabaseSyncTree {\n  constructor() {\n    this._tree = {};\n    this._reverseLookup = {};\n\n    SharedEventEmitter.addListener('database_sync_event', this._handleSyncEvent.bind(this));\n  }\n\n  get native() {\n    return NativeModules.RNFBDatabaseQueryModule;\n  }\n\n  /**\n   * Handles an incoming event from native\n   * @param event\n   * @private\n   */\n  _handleSyncEvent(event) {\n    const { body } = event;\n    if (body.error) {\n      this._handleErrorEvent(body);\n    } else {\n      this._handleValueEvent(body);\n    }\n  }\n\n  /**\n   * Routes native database query listener cancellation events to their js counterparts.\n   *\n   * @param event\n   * @private\n   */\n  _handleErrorEvent(event) {\n    // console.log('SyncTree.ERROR >>>', event);\n    const { eventRegistrationKey, registrationCancellationKey } = event.registration;\n\n    const registration = this.getRegistration(registrationCancellationKey);\n\n    if (registration) {\n      // build a new js error - we additionally attach\n      // the ref as a property for easier debugging\n      const error = NativeError.fromEvent(event.error, 'database');\n\n      // forward on to users .on(successCallback, cancellationCallback <-- listener\n      SharedEventEmitter.emit(registrationCancellationKey, error);\n\n      // remove the paired event registration - if we received a cancellation\n      // event then it's guaranteed that they'll be no further value events\n      this.removeRegistration(eventRegistrationKey);\n    }\n  }\n\n  /**\n   * Routes native database 'on' events to their js equivalent counterpart.\n   * If t is no longer any listeners remaining for this event we internally\n   * call the native unsub method to prevent further events coming through.\n   *\n   * @param event\n   * @private\n   */\n  _handleValueEvent(event) {\n    // console.log('SyncTree.VALUE >>>', event);\n    const { key, eventRegistrationKey } = event.registration;\n    const registration = this.getRegistration(eventRegistrationKey);\n    // console.log('SyncTree.registration >>>', registration);\n\n    if (!registration) {\n      // registration previously revoked\n      // notify native that the registration\n      // no longer exists so it can remove\n      // the native listeners\n      return this.native.off(key, eventRegistrationKey);\n    }\n\n    let snapshot;\n    let previousChildName;\n\n    // Value events don't return a previousChildName\n    if (event.eventType === 'value') {\n      snapshot = new DatabaseDataSnapshot(registration.ref, event.data);\n    } else {\n      snapshot = new DatabaseDataSnapshot(registration.ref, event.data.snapshot);\n      previousChildName = event.data.previousChildName;\n    }\n\n    // forward on to users .on(successCallback <-- listener\n    return SharedEventEmitter.emit(eventRegistrationKey, snapshot, previousChildName);\n  }\n\n  /**\n   * Returns registration information such as appName, ref, path and registration keys.\n   *\n   * @param registration\n   * @return {null}\n   */\n  getRegistration(registration) {\n    return this._reverseLookup[registration]\n      ? Object.assign({}, this._reverseLookup[registration])\n      : null;\n  }\n\n  /**\n   * Removes all listeners for the specified registration keys.\n   *\n   * @param registrations\n   * @return {number}\n   */\n  removeListenersForRegistrations(registrations) {\n    if (isString(registrations)) {\n      this.removeRegistration(registrations);\n      SharedEventEmitter.removeAllListeners(registrations);\n      return 1;\n    }\n\n    if (!Array.isArray(registrations)) {\n      return 0;\n    }\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      this.removeRegistration(registrations[i]);\n      SharedEventEmitter.removeAllListeners(registrations[i]);\n    }\n\n    return registrations.length;\n  }\n\n  /**\n   * Removes a specific listener from the specified registrations.\n   *\n   * @param listener\n   * @param registrations\n   * @return {Array} array of registrations removed\n   */\n  removeListenerRegistrations(listener, registrations) {\n    if (!Array.isArray(registrations)) {\n      return [];\n    }\n    const removed = [];\n\n    for (let i = 0, len = registrations.length; i < len; i++) {\n      const registration = registrations[i];\n      const subscriptions = SharedEventEmitter._subscriber.getSubscriptionsForType(registration);\n\n      if (subscriptions) {\n        for (let j = 0, l = subscriptions.length; j < l; j++) {\n          const subscription = subscriptions[j];\n          // The subscription may have been removed during this event loop.\n          // its listener matches the listener in method parameters\n          if (subscription && subscription.listener === listener) {\n            subscription.remove();\n            removed.push(registration);\n            this.removeRegistration(registration);\n          }\n        }\n      }\n    }\n\n    return removed;\n  }\n\n  /**\n   * Returns an array of all registration keys for the specified path.\n   *\n   * @param path\n   * @return {Array}\n   */\n  getRegistrationsByPath(path) {\n    const out = [];\n    const eventKeys = Object.keys(this._tree[path] || {});\n\n    for (let i = 0, len = eventKeys.length; i < len; i++) {\n      Array.prototype.push.apply(out, Object.keys(this._tree[path][eventKeys[i]]));\n    }\n\n    return out;\n  }\n\n  /**\n   * Returns an array of all registration keys for the specified path and eventType.\n   *\n   * @param path\n   * @param eventType\n   * @return {Array}\n   */\n  getRegistrationsByPathEvent(path, eventType) {\n    if (!this._tree[path]) {\n      return [];\n    }\n    if (!this._tree[path][eventType]) {\n      return [];\n    }\n\n    return Object.keys(this._tree[path][eventType]);\n  }\n\n  /**\n   * Returns a single registration key for the specified path, eventType, and listener\n   *\n   * @param path\n   * @param eventType\n   * @param listener\n   * @return {Array}\n   */\n  getOneByPathEventListener(path, eventType, listener) {\n    if (!this._tree[path]) {\n      return null;\n    }\n    if (!this._tree[path][eventType]) {\n      return null;\n    }\n\n    const registrationsForPathEvent = Object.entries(this._tree[path][eventType]);\n\n    for (let i = 0; i < registrationsForPathEvent.length; i++) {\n      const registration = registrationsForPathEvent[i];\n      if (registration[1] === listener) {\n        return registration[0];\n      }\n    }\n\n    return null;\n  }\n\n  /**\n   * Register a new listener.\n   *\n   * @param registration\n   */\n  addRegistration(registration) {\n    const { eventRegistrationKey, eventType, listener, once, path } = registration;\n\n    if (!this._tree[path]) {\n      this._tree[path] = {};\n    }\n    if (!this._tree[path][eventType]) {\n      this._tree[path][eventType] = {};\n    }\n\n    this._tree[path][eventType][eventRegistrationKey] = listener;\n    this._reverseLookup[eventRegistrationKey] = registration;\n\n    if (once) {\n      SharedEventEmitter.once(\n        eventRegistrationKey,\n        this._onOnceRemoveRegistration(eventRegistrationKey, listener),\n      );\n    } else {\n      SharedEventEmitter.addListener(eventRegistrationKey, listener);\n    }\n\n    return eventRegistrationKey;\n  }\n\n  /**\n   * Remove a registration, if it's not a `once` registration then instructs native\n   * to also remove the underlying database query listener.\n   *\n   * @param registration\n   * @return {boolean}\n   */\n  removeRegistration(registration) {\n    if (!this._reverseLookup[registration]) {\n      return false;\n    }\n    const { path, eventType, once } = this._reverseLookup[registration];\n\n    if (!this._tree[path]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n\n    if (!this._tree[path][eventType]) {\n      delete this._reverseLookup[registration];\n      return false;\n    }\n\n    // we don't want `once` events to notify native as they're already\n    // automatically unsubscribed on native when the first event is sent\n    const registrationObj = this._reverseLookup[registration];\n    if (registrationObj && !once) {\n      this.native.off(registrationObj.key, registration);\n    }\n\n    delete this._tree[path][eventType][registration];\n    delete this._reverseLookup[registration];\n\n    return !!registrationObj;\n  }\n\n  /**\n   * Wraps a `once` listener with a new function that self de-registers.\n   *\n   * @param registration\n   * @param listener\n   * @return {function(...[*])}\n   * @private\n   */\n  _onOnceRemoveRegistration(registration, listener) {\n    return (...args) => {\n      this.removeRegistration(registration);\n      listener(...args);\n    };\n  }\n}\n\nexport default new DatabaseSyncTree();\n"]},"metadata":{},"sourceType":"script"}