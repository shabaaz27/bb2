{"ast":null,"code":"var _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar _DatabaseDataSnapshot = _interopRequireDefault(require(\"./DatabaseDataSnapshot\"));\n\nvar _DatabaseOnDisconnect = _interopRequireDefault(require(\"./DatabaseOnDisconnect\"));\n\nvar _DatabaseQuery2 = _interopRequireWildcard(require(\"./DatabaseQuery\"));\n\nvar _DatabaseQueryModifiers = _interopRequireDefault(require(\"./DatabaseQueryModifiers\"));\n\nvar _DatabaseThenableReference = _interopRequireWildcard(require(\"./DatabaseThenableReference\"));\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar internalRefs = ['.info/connected', '.info/serverTimeOffset'];\n\nvar DatabaseReference = function (_DatabaseQuery) {\n  (0, _inherits2.default)(DatabaseReference, _DatabaseQuery);\n\n  var _super = _createSuper(DatabaseReference);\n\n  function DatabaseReference(database, path) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, DatabaseReference);\n\n    if (!internalRefs.includes(path) && !(0, _common.isValidPath)(path)) {\n      throw new Error('firebase.database() Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n    }\n\n    _this = _super.call(this, database, path, new _DatabaseQueryModifiers.default());\n    _this._database = database;\n    return _this;\n  }\n\n  (0, _createClass2.default)(DatabaseReference, [{\n    key: \"child\",\n    value: function child(path) {\n      if (!(0, _common.isString)(path)) {\n        throw new Error(\"firebase.database().ref().child(*) 'path' must be a string value.\");\n      }\n\n      return new DatabaseReference(this._database, (0, _common.pathChild)(this.path, path));\n    }\n  }, {\n    key: \"set\",\n    value: function set(value, onComplete) {\n      if ((0, _common.isUndefined)(value)) {\n        throw new Error(\"firebase.database().ref().set(*) 'value' must be defined.\");\n      }\n\n      if (!(0, _common.isUndefined)(onComplete) && !(0, _common.isFunction)(onComplete)) {\n        throw new Error(\"firebase.database().ref().set(_, *) 'onComplete' must be a function if provided.\");\n      }\n\n      return (0, _common.promiseWithOptionalCallback)(this._database.native.set(this.path, {\n        value: value\n      }), onComplete);\n    }\n  }, {\n    key: \"update\",\n    value: function update(values, onComplete) {\n      if (!(0, _common.isObject)(values)) {\n        throw new Error(\"firebase.database().ref().update(*) 'values' must be an object.\");\n      }\n\n      if (!Object.keys(values).length) {\n        throw new Error(\"firebase.database().ref().update(*) 'values' must be an object containing multiple values.\");\n      }\n\n      var keys = Object.keys(values);\n\n      for (var i = 0; i < keys.length; i++) {\n        if (!(0, _common.isValidPath)(keys[i])) {\n          throw new Error('firebase.database().update(*) \\'values\\' contains an invalid path. Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n        }\n      }\n\n      if (!(0, _common.isUndefined)(onComplete) && !(0, _common.isFunction)(onComplete)) {\n        throw new Error(\"firebase.database().ref().update(_, *) 'onComplete' must be a function if provided.\");\n      }\n\n      return (0, _common.promiseWithOptionalCallback)(this._database.native.update(this.path, {\n        values: values\n      }), onComplete);\n    }\n  }, {\n    key: \"setWithPriority\",\n    value: function setWithPriority(newVal, newPriority, onComplete) {\n      if ((0, _common.isUndefined)(newVal)) {\n        throw new Error(\"firebase.database().ref().setWithPriority(*) 'newVal' must be defined.\");\n      }\n\n      if (!(0, _common.isNumber)(newPriority) && !(0, _common.isString)(newPriority) && !(0, _common.isNull)(newPriority)) {\n        throw new Error(\"firebase.database().ref().setWithPriority(_, *) 'newPriority' must be a number, string or null value.\");\n      }\n\n      if (!(0, _common.isUndefined)(onComplete) && !(0, _common.isFunction)(onComplete)) {\n        throw new Error(\"firebase.database().ref().setWithPriority(_, _, *) 'onComplete' must be a function if provided.\");\n      }\n\n      return (0, _common.promiseWithOptionalCallback)(this._database.native.setWithPriority(this.path, {\n        value: newVal,\n        priority: newPriority\n      }), onComplete);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(onComplete) {\n      if (!(0, _common.isUndefined)(onComplete) && !(0, _common.isFunction)(onComplete)) {\n        throw new Error(\"firebase.database().ref().remove(*) 'onComplete' must be a function if provided.\");\n      }\n\n      return (0, _common.promiseWithOptionalCallback)(this._database.native.remove(this.path), onComplete);\n    }\n  }, {\n    key: \"transaction\",\n    value: function transaction(transactionUpdate, onComplete, applyLocally) {\n      var _this2 = this;\n\n      if (!(0, _common.isFunction)(transactionUpdate)) {\n        throw new Error(\"firebase.database().ref().transaction(*) 'transactionUpdate' must be a function.\");\n      }\n\n      if (!(0, _common.isUndefined)(onComplete) && !(0, _common.isFunction)(onComplete)) {\n        throw new Error(\"firebase.database().ref().transaction(_, *) 'onComplete' must be a function if provided.\");\n      }\n\n      if (!(0, _common.isUndefined)(applyLocally) && !(0, _common.isBoolean)(applyLocally)) {\n        throw new Error(\"firebase.database().ref().transaction(_, _, *) 'applyLocally' must be a boolean value if provided.\");\n      }\n\n      return new Promise(function (resolve, reject) {\n        var onCompleteWrapper = function onCompleteWrapper(error, committed, snapshotData) {\n          if ((0, _common.isFunction)(onComplete)) {\n            if (error) {\n              onComplete(error, committed, null);\n            } else {\n              onComplete(null, committed, new _DatabaseDataSnapshot.default(_this2, snapshotData));\n            }\n          }\n\n          if (error) {\n            return reject(error);\n          }\n\n          return resolve({\n            committed: committed,\n            snapshot: new _DatabaseDataSnapshot.default(_this2, snapshotData)\n          });\n        };\n\n        _this2._database._transaction.add(_this2, transactionUpdate, onCompleteWrapper, applyLocally);\n      });\n    }\n  }, {\n    key: \"setPriority\",\n    value: function setPriority(priority, onComplete) {\n      if (!(0, _common.isNumber)(priority) && !(0, _common.isString)(priority) && !(0, _common.isNull)(priority)) {\n        throw new Error(\"firebase.database().ref().setPriority(*) 'priority' must be a number, string or null value.\");\n      }\n\n      if (!(0, _common.isUndefined)(onComplete) && !(0, _common.isFunction)(onComplete)) {\n        throw new Error(\"firebase.database().ref().setPriority(_, *) 'onComplete' must be a function if provided.\");\n      }\n\n      return (0, _common.promiseWithOptionalCallback)(this._database.native.setPriority(this.path, {\n        priority: priority\n      }), onComplete);\n    }\n  }, {\n    key: \"push\",\n    value: function push(value, onComplete) {\n      if (!(0, _common.isUndefined)(onComplete) && !(0, _common.isFunction)(onComplete)) {\n        throw new Error(\"firebase.database().ref().push(_, *) 'onComplete' must be a function if provided.\");\n      }\n\n      var id = (0, _common.generateDatabaseId)(this._database._serverTimeOffset);\n\n      if ((0, _common.isUndefined)(value) || (0, _common.isNull)(value)) {\n        return new _DatabaseThenableReference.default(this._database, (0, _common.pathChild)(this.path, id), Promise.resolve(this.child(id)));\n      }\n\n      var pushRef = this.child(id);\n      var promise = pushRef.set(value, onComplete).then(function () {\n        return pushRef;\n      });\n\n      if (onComplete) {\n        promise.catch(function () {});\n      }\n\n      return new _DatabaseThenableReference.default(this._database, (0, _common.pathChild)(this.path, id), promise);\n    }\n  }, {\n    key: \"onDisconnect\",\n    value: function onDisconnect() {\n      return new _DatabaseOnDisconnect.default(this);\n    }\n  }, {\n    key: \"parent\",\n    get: function get() {\n      var parentPath = (0, _common.pathParent)(this.path);\n\n      if (parentPath === null) {\n        return null;\n      }\n\n      return new DatabaseReference(this._database, parentPath);\n    }\n  }, {\n    key: \"root\",\n    get: function get() {\n      return new DatabaseReference(this._database, '/');\n    }\n  }]);\n  return DatabaseReference;\n}(_DatabaseQuery2.default);\n\nexports.default = DatabaseReference;\n(0, _DatabaseQuery2.provideReferenceClass)(DatabaseReference);\n(0, _DatabaseThenableReference.provideReferenceClass)(DatabaseReference);","map":{"version":3,"sources":["C:/Users/mysiew/Documents/eCommerce/codecanyon-xPJMYS8x-react-native-delivery-solution-with-advance-website-and-cms/SourceCode/vesend-consumer-app-master/node_modules/@react-native-firebase/database/lib/DatabaseReference.js"],"names":["internalRefs","DatabaseReference","database","path","includes","Error","DatabaseQueryModifiers","_database","value","onComplete","native","set","values","Object","keys","length","i","update","newVal","newPriority","setWithPriority","priority","remove","transactionUpdate","applyLocally","Promise","resolve","reject","onCompleteWrapper","error","committed","snapshotData","DatabaseDataSnapshot","snapshot","_transaction","add","setPriority","id","_serverTimeOffset","DatabaseThenableReference","child","pushRef","promise","then","catch","DatabaseOnDisconnect","parentPath","DatabaseQuery"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  generateDatabaseId,\n  isBoolean,\n  isFunction,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  isValidPath,\n  pathChild,\n  pathParent,\n  promiseWithOptionalCallback,\n} from '@react-native-firebase/app/lib/common';\nimport DatabaseDataSnapshot from './DatabaseDataSnapshot';\nimport DatabaseOnDisconnect from './DatabaseOnDisconnect';\nimport DatabaseQuery, {\n  provideReferenceClass as provideReferenceClassForQuery,\n} from './DatabaseQuery';\nimport DatabaseQueryModifiers from './DatabaseQueryModifiers';\nimport DatabaseThenableReference, {\n  provideReferenceClass as provideReferenceClassForThenable,\n} from './DatabaseThenableReference';\n\nconst internalRefs = ['.info/connected', '.info/serverTimeOffset'];\n\nexport default class DatabaseReference extends DatabaseQuery {\n  constructor(database, path) {\n    // Validate the reference path\n    if (!internalRefs.includes(path) && !isValidPath(path)) {\n      throw new Error(\n        'firebase.database() Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"',\n      );\n    }\n\n    super(database, path, new DatabaseQueryModifiers());\n    this._database = database;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference.html#parent\n   */\n  get parent() {\n    const parentPath = pathParent(this.path);\n    if (parentPath === null) {\n      return null;\n    }\n    return new DatabaseReference(this._database, parentPath);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference.html#root\n   */\n  get root() {\n    return new DatabaseReference(this._database, '/');\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference.html#child\n   * @param path\n   */\n  child(path) {\n    if (!isString(path)) {\n      throw new Error(\"firebase.database().ref().child(*) 'path' must be a string value.\");\n    }\n    return new DatabaseReference(this._database, pathChild(this.path, path));\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference.html#set\n   * @param value\n   * @param onComplete\n   */\n  set(value, onComplete) {\n    if (isUndefined(value)) {\n      throw new Error(\"firebase.database().ref().set(*) 'value' must be defined.\");\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().set(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(this._database.native.set(this.path, { value }), onComplete);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference.html#update\n   * @param values\n   * @param onComplete\n   */\n  update(values, onComplete) {\n    if (!isObject(values)) {\n      throw new Error(\"firebase.database().ref().update(*) 'values' must be an object.\");\n    }\n\n    if (!Object.keys(values).length) {\n      throw new Error(\n        \"firebase.database().ref().update(*) 'values' must be an object containing multiple values.\",\n      );\n    }\n\n    const keys = Object.keys(values);\n    for (let i = 0; i < keys.length; i++) {\n      if (!isValidPath(keys[i])) {\n        throw new Error(\n          'firebase.database().update(*) \\'values\\' contains an invalid path. Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"',\n        );\n      }\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().update(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._database.native.update(this.path, { values }),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference#setwithpriority\n   * @param newVal\n   * @param newPriority\n   * @param onComplete\n   */\n  setWithPriority(newVal, newPriority, onComplete) {\n    if (isUndefined(newVal)) {\n      throw new Error(\"firebase.database().ref().setWithPriority(*) 'newVal' must be defined.\");\n    }\n\n    if (!isNumber(newPriority) && !isString(newPriority) && !isNull(newPriority)) {\n      throw new Error(\n        \"firebase.database().ref().setWithPriority(_, *) 'newPriority' must be a number, string or null value.\",\n      );\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().setWithPriority(_, _, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._database.native.setWithPriority(this.path, {\n        value: newVal,\n        priority: newPriority,\n      }),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference#remove\n   * @param onComplete\n   */\n  remove(onComplete) {\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().remove(*) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(this._database.native.remove(this.path), onComplete);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference#transaction\n   * @param transactionUpdate\n   * @param onComplete\n   * @param applyLocally\n   */\n  transaction(transactionUpdate, onComplete, applyLocally) {\n    if (!isFunction(transactionUpdate)) {\n      throw new Error(\n        \"firebase.database().ref().transaction(*) 'transactionUpdate' must be a function.\",\n      );\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().transaction(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    if (!isUndefined(applyLocally) && !isBoolean(applyLocally)) {\n      throw new Error(\n        \"firebase.database().ref().transaction(_, _, *) 'applyLocally' must be a boolean value if provided.\",\n      );\n    }\n\n    return new Promise((resolve, reject) => {\n      const onCompleteWrapper = (error, committed, snapshotData) => {\n        if (isFunction(onComplete)) {\n          if (error) {\n            onComplete(error, committed, null);\n          } else {\n            onComplete(null, committed, new DatabaseDataSnapshot(this, snapshotData));\n          }\n        }\n\n        if (error) {\n          return reject(error);\n        }\n        return resolve({\n          committed,\n          snapshot: new DatabaseDataSnapshot(this, snapshotData),\n        });\n      };\n\n      // start the transaction natively\n      this._database._transaction.add(this, transactionUpdate, onCompleteWrapper, applyLocally);\n    });\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference#setpriority\n   * @param priority\n   * @param onComplete\n   */\n  setPriority(priority, onComplete) {\n    if (!isNumber(priority) && !isString(priority) && !isNull(priority)) {\n      throw new Error(\n        \"firebase.database().ref().setPriority(*) 'priority' must be a number, string or null value.\",\n      );\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().setPriority(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._database.native.setPriority(this.path, { priority }),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference#push\n   * @param value\n   * @param onComplete\n   * @returns {DatabaseReference}\n   */\n  push(value, onComplete) {\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().push(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    const id = generateDatabaseId(this._database._serverTimeOffset);\n\n    if (isUndefined(value) || isNull(value)) {\n      return new DatabaseThenableReference(\n        this._database,\n        pathChild(this.path, id),\n        Promise.resolve(this.child(id)),\n      );\n    }\n\n    const pushRef = this.child(id);\n\n    const promise = pushRef.set(value, onComplete).then(() => pushRef);\n\n    // Prevent unhandled promise rejection if onComplete is passed\n    if (onComplete) {\n      promise.catch(() => {});\n    }\n\n    return new DatabaseThenableReference(this._database, pathChild(this.path, id), promise);\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.Reference#ondisconnect\n   */\n  onDisconnect() {\n    return new DatabaseOnDisconnect(this);\n  }\n}\n\n// To avoid React Native require cycle warnings\nprovideReferenceClassForQuery(DatabaseReference);\nprovideReferenceClassForThenable(DatabaseReference);\n"]},"metadata":{},"sourceType":"script"}