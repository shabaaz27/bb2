{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _interopRequireWildcard = require(\"@babel/runtime/helpers/interopRequireWildcard\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _regenerator = _interopRequireDefault(require(\"@babel/runtime/regenerator\"));\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _inherits2 = _interopRequireDefault(require(\"@babel/runtime/helpers/inherits\"));\n\nvar _possibleConstructorReturn2 = _interopRequireDefault(require(\"@babel/runtime/helpers/possibleConstructorReturn\"));\n\nvar _getPrototypeOf2 = _interopRequireDefault(require(\"@babel/runtime/helpers/getPrototypeOf\"));\n\nvar _react = _interopRequireWildcard(require(\"react\"));\n\nvar _reactNative = require(\"react-native\");\n\nvar _reactNavigationStack = require(\"react-navigation-stack\");\n\nvar _WooComFetch = require(\"../common/WooComFetch\");\n\nvar _reactRedux = require(\"react-redux\");\n\nvar _syncStorage = _interopRequireDefault(require(\"sync-storage\"));\n\nvar _reactNativeLoadingSpinnerOverlay = _interopRequireDefault(require(\"react-native-loading-spinner-overlay\"));\n\nvar _Theme = _interopRequireDefault(require(\"../common/Theme.style\"));\n\nvar _jsxFileName = \"C:\\\\Users\\\\mysiew\\\\Documents\\\\eCommerce\\\\codecanyon-xPJMYS8x-react-native-delivery-solution-with-advance-website-and-cms\\\\SourceCode\\\\vesend-consumer-app-master\\\\src\\\\screens\\\\PassChangeScreen.js\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = (0, _getPrototypeOf2.default)(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = (0, _getPrototypeOf2.default)(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return (0, _possibleConstructorReturn2.default)(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nvar WIDTH = _reactNative.Dimensions.get('window').width;\n\nvar CreateAccount = function (_PureComponent) {\n  (0, _inherits2.default)(CreateAccount, _PureComponent);\n\n  var _super = _createSuper(CreateAccount);\n\n  (0, _createClass2.default)(CreateAccount, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.props.navigation.setParams({\n        headerTitle: this.props.isLoading.Config.languageJson2['Change Password']\n      });\n    }\n  }]);\n\n  function CreateAccount(props) {\n    var _this;\n\n    (0, _classCallCheck2.default)(this, CreateAccount);\n    _this = _super.call(this, props);\n\n    _this.updateInfo = function (t) {\n      if (_this.state.newPassword.length === 0 || _this.state.password.length === 0 || _this.state.currentPassword.length === 0) {\n        _this.setState({\n          errorMessage: _this.props.isLoading.Config.languageJson2['Please Enter all fields']\n        });\n      } else if (_this.state.newPassword.toString() !== _this.state.password.toString()) {\n        _this.setState({\n          errorMessage: _this.props.isLoading.Config.languageJson2['New password and confirm password must be same']\n        });\n      } else {\n        t.setState({\n          spinnerTemp: true\n        }, function () {\n          t.state.myAccountData.oldpassword = _syncStorage.default.get('customerData').password;\n          t.state.myAccountData.newpassword = t.state.password;\n          t.state.myAccountData.customers_id = _syncStorage.default.get('customerData').customers_id;\n\n          if (t.state.password !== '') {\n            t.state.myAccountData.password = t.state.password;\n          }\n\n          t.UpdateCustomerData1(_syncStorage.default.get('customerData').customers_id, t.state.myAccountData);\n        });\n      }\n    };\n\n    _this.UpdateCustomerData1 = function _callee(id, object) {\n      var data;\n      return _regenerator.default.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regenerator.default.awrap((0, _WooComFetch.getHttp)((0, _WooComFetch.getUrl)() + '/api/' + 'updatepassword?oldpassword=' + _this.state.currentPassword + '&newpassword=' + _this.state.newPassword + '&customers_id=' + id, {}));\n\n            case 2:\n              data = _context.sent;\n\n              _this.setState({\n                spinnerTemp: false,\n                currentPassword: '',\n                password: '',\n                newPassword: '',\n                errorMessage: data.data.message,\n                success: data.data.success\n              });\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    _this.state = {\n      myAccountData: {},\n      firstName: _syncStorage.default.get('customerData').customers_firstname,\n      lastName: _syncStorage.default.get('customerData').customers_lastname,\n      errorMessage: '',\n      spinnerTemp: false,\n      phone: _syncStorage.default.get('customerData').phone,\n      currentPassword: '',\n      newPassword: '',\n      password: '',\n      success: '',\n      customers_id: '',\n      image_id: 0,\n      customers_telephone: ''\n    };\n    return _this;\n  }\n\n  (0, _createClass2.default)(CreateAccount, [{\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return _react.default.createElement(_reactNative.ScrollView, {\n        style: {\n          backgroundColor: _Theme.default.backgroundColor\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 7\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: {\n          flex: 1,\n          backgroundColor: _Theme.default.backgroundColor,\n          justifyContent: 'space-between',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 9\n        }\n      }, _react.default.createElement(_reactNativeLoadingSpinnerOverlay.default, {\n        visible: this.state.spinnerTemp,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 11\n        }\n      }), _react.default.createElement(_reactNative.View, {\n        style: {\n          flex: 1,\n          flexDirection: 'column',\n          justifyContent: 'center',\n          alignItems: 'center'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 11\n        }\n      }, _react.default.createElement(_reactNative.TextInput, {\n        style: {\n          marginTop: 20,\n          height: 38,\n          width: WIDTH * 0.9,\n          borderColor: '#c1c1c1',\n          borderWidth: 1,\n          fontSize: _Theme.default.mediumSize,\n          paddingLeft: 6,\n          paddingRight: 6,\n          textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',\n          color: _Theme.default.textColor\n        },\n        placeholderTextColor: '#c1c1c1',\n        secureTextEntry: true,\n        selectionColor: \"#51688F\",\n        placeholder: this.props.isLoading.Config.languageJson2['Current Password'],\n        onChangeText: function onChangeText(currentPassword) {\n          return _this2.setState({\n            currentPassword: currentPassword,\n            errorMessage: ''\n          });\n        },\n        value: this.state.currentPassword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150,\n          columnNumber: 13\n        }\n      }), _react.default.createElement(_reactNative.TextInput, {\n        style: {\n          marginTop: 20,\n          height: 38,\n          width: WIDTH * 0.9,\n          borderColor: '#c1c1c1',\n          borderWidth: 1,\n          fontSize: _Theme.default.mediumSize,\n          paddingLeft: 6,\n          paddingRight: 6,\n          textAlign: _reactNative.I18nManager.isRTL ? 'right' : 'left',\n          color: _Theme.default.textColor\n        },\n        placeholderTextColor: '#c1c1c1',\n        secureTextEntry: true,\n        selectionColor: \"#51688F\",\n        placeholder: this.props.isLoading.Config.languageJson2['New Password'],\n        onChangeText: function onChangeText(newPassword) {\n          return _this2.setState({\n            newPassword: newPassword,\n            errorMessage: ''\n          });\n        },\n        value: this.state.newPassword,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175,\n          columnNumber: 13\n        }\n      }), _react.default.createElement(_reactNative.TextInput, {\n        style: {\n          marginTop: 15,\n          height: 38,\n          width: WIDTH * 0.9,\n          borderColor: '#c1c1c1',\n          borderWidth: 1,\n          fontSize: _Theme.default.mediumSize,\n          paddingLeft: 4,\n          textAlign: _reactNative.I18nManager.isRTL ? _reactNative.Platform.OS === 'android' ? 'right' : 'auto' : 'auto',\n          color: _Theme.default.textColor\n        },\n        placeholderTextColor: '#c1c1c1',\n        secureTextEntry: true,\n        selectionColor: \"#51688F\",\n        placeholder: this.props.isLoading.Config.languageJson2['Confirm Password'],\n        onChangeText: function onChangeText(password) {\n          return _this2.setState({\n            password: password,\n            errorMessage: ''\n          });\n        },\n        value: this.state.password,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 200,\n          columnNumber: 13\n        }\n      }), _react.default.createElement(_reactNative.TouchableOpacity, {\n        disabled: this.state.newPassword.length === 0 || this.state.password.length === 0 || this.state.currentPassword.length === 0,\n        onPress: function onPress() {\n          return _this2.updateInfo(_this2);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 228,\n          columnNumber: 13\n        }\n      }, _react.default.createElement(_reactNative.View, {\n        style: {\n          marginTop: 18,\n          alignItems: 'center',\n          height: 38,\n          width: WIDTH * 0.9,\n          backgroundColor: this.state.newPassword.length === 0 || this.state.password.length === 0 || this.state.currentPassword.length === 0 ? '#c1c1c1' : _Theme.default.otherBtnsColor,\n          justifyContent: 'center',\n          opacity: this.state.firstName === '' || this.state.lastName === '' || this.state.email === '' || this.state.password === '' === '' ? 0.4 : 0.9\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 15\n        }\n      }, _react.default.createElement(_reactNative.Text, {\n        style: {\n          textAlign: 'center',\n          color: _Theme.default.otherBtnsText,\n          fontSize: _Theme.default.mediumSize,\n          fontWeight: '500'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 17\n        }\n      }, this.props.isLoading.Config.languageJson2.Update))), this.state.errorMessage !== '' ? _react.default.createElement(_reactNative.Text, {\n        style: {\n          marginTop: 18,\n          color: this.state.success !== '1' ? 'red' : 'green'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 15\n        }\n      }, this.state.errorMessage) : null)));\n    }\n  }]);\n  return CreateAccount;\n}(_react.PureComponent);\n\nCreateAccount.navigationOptions = function (_ref) {\n  var navigation = _ref.navigation;\n  var headerStyle = navigation.getParam('headerTitle');\n  return {\n    headerTitle: headerStyle,\n    cardStyleInterpolator: _reactNavigationStack.CardStyleInterpolators.forHorizontalIOS,\n    gestureEnabled: false,\n    drawerLockMode: 'locked-closed',\n    headerTitleAlign: 'center',\n    headerTintColor: _Theme.default.headerTintColor,\n    headerStyle: {\n      backgroundColor: _Theme.default.primary\n    },\n    headerTitleStyle: {\n      fontWeight: _reactNative.Platform.OS === 'android' ? 'bold' : 'normal'\n    },\n    headerForceInset: {\n      top: 'never',\n      vertical: 'never'\n    }\n  };\n};\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    isLoading: state\n  };\n};\n\nvar _default = (0, _reactRedux.connect)(mapStateToProps, null)(CreateAccount);\n\nexports.default = _default;","map":{"version":3,"sources":["C:/Users/mysiew/Documents/eCommerce/codecanyon-xPJMYS8x-react-native-delivery-solution-with-advance-website-and-cms/SourceCode/vesend-consumer-app-master/src/screens/PassChangeScreen.js"],"names":["WIDTH","Dimensions","get","width","CreateAccount","props","navigation","setParams","headerTitle","isLoading","Config","languageJson2","updateInfo","t","state","newPassword","length","password","currentPassword","setState","errorMessage","toString","spinnerTemp","myAccountData","oldpassword","SyncStorage","newpassword","customers_id","UpdateCustomerData1","id","object","data","message","success","firstName","customers_firstname","lastName","customers_lastname","phone","image_id","customers_telephone","backgroundColor","themeStyle","flex","justifyContent","alignItems","flexDirection","marginTop","height","borderColor","borderWidth","fontSize","mediumSize","paddingLeft","paddingRight","textAlign","I18nManager","isRTL","color","textColor","Platform","OS","otherBtnsColor","opacity","email","otherBtnsText","fontWeight","Update","PureComponent","navigationOptions","headerStyle","getParam","cardStyleInterpolator","CardStyleInterpolators","forHorizontalIOS","gestureEnabled","drawerLockMode","headerTitleAlign","headerTintColor","primary","headerTitleStyle","headerForceInset","top","vertical","mapStateToProps"],"mappings":"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","sourcesContent":["import React, { PureComponent } from 'react'\nimport {\n  Text,\n  View,\n  TextInput,\n  TouchableOpacity,\n  Dimensions,\n  I18nManager,\n  Platform,\n  ScrollView\n} from 'react-native'\nimport { CardStyleInterpolators } from 'react-navigation-stack'\nimport { getUrl, getHttp } from '../common/WooComFetch'\nimport { connect } from 'react-redux'\nimport SyncStorage from 'sync-storage'\nimport Spinner from 'react-native-loading-spinner-overlay'\nimport themeStyle from '../common/Theme.style'\nconst WIDTH = Dimensions.get('window').width\nclass CreateAccount extends PureComponent {\n  /// /////////////////////////////////////////////////////////\n  static navigationOptions = ({ navigation }) => {\n    const headerStyle = navigation.getParam('headerTitle')\n    return {\n      headerTitle: headerStyle,\n      cardStyleInterpolator: CardStyleInterpolators.forHorizontalIOS,\n      gestureEnabled: false,\n      drawerLockMode: 'locked-closed',\n      headerTitleAlign: 'center',\n      headerTintColor: themeStyle.headerTintColor,\n      headerStyle: {\n        backgroundColor: themeStyle.primary\n      },\n      headerTitleStyle: {\n        fontWeight: Platform.OS === 'android' ? 'bold' : 'normal'\n      },\n      headerForceInset: { top: 'never', vertical: 'never' }\n    }\n  }\n\n  /// /////////////////////////////////////////////////////////\n  componentDidMount () {\n    this.props.navigation.setParams({\n      headerTitle: this.props.isLoading.Config.languageJson2['Change Password']\n    })\n  }\n\n  /// //////////////////////////////////////////////////////////\n  constructor (props) {\n    super(props)\n    this.state = {\n      myAccountData: {},\n      firstName: SyncStorage.get('customerData').customers_firstname,\n      lastName: SyncStorage.get('customerData').customers_lastname,\n      errorMessage: '',\n      spinnerTemp: false,\n      phone: SyncStorage.get('customerData').phone,\n      currentPassword: '',\n      newPassword: '',\n      password: '',\n      success: '',\n      customers_id: '',\n      image_id: 0,\n      customers_telephone: ''\n    }\n  }\n\n  /// ///////////////////////////////////////////////////\n  updateInfo = t => {\n    if (\n      this.state.newPassword.length === 0 ||\n      this.state.password.length === 0 ||\n      this.state.currentPassword.length === 0\n    ) {\n      this.setState({\n        errorMessage: this.props.isLoading.Config.languageJson2[\n          'Please Enter all fields'\n        ]\n      })\n    } else if (\n      this.state.newPassword.toString() !== this.state.password.toString()\n    ) {\n      this.setState({\n        errorMessage: this.props.isLoading.Config.languageJson2[\n          'New password and confirm password must be same'\n        ]\n      })\n    } else {\n      t.setState({ spinnerTemp: true }, () => {\n        t.state.myAccountData.oldpassword = SyncStorage.get(\n          'customerData'\n        ).password\n        t.state.myAccountData.newpassword = t.state.password\n        t.state.myAccountData.customers_id = SyncStorage.get(\n          'customerData'\n        ).customers_id\n        if (t.state.password !== '') { t.state.myAccountData.password = t.state.password }\n        t.UpdateCustomerData1(\n          SyncStorage.get('customerData').customers_id,\n          t.state.myAccountData\n        )\n      })\n    }\n  }\n\n  /// ///////////////////////////////////////////////////\n  UpdateCustomerData1 = async (id, object) => {\n    const data = await getHttp(\n      getUrl() +\n        '/api/' +\n        'updatepassword?oldpassword=' +\n        this.state.currentPassword +\n        '&newpassword=' +\n        this.state.newPassword +\n        '&customers_id=' +\n        id,\n      {}\n    )\n    this.setState({\n      spinnerTemp: false,\n      currentPassword: '',\n      password: '',\n      newPassword: '',\n      errorMessage: data.data.message,\n      success: data.data.success\n    })\n  }\n\n  /// //////\n  render () {\n    return (\n      <ScrollView style={{ backgroundColor: themeStyle.backgroundColor }}>\n        <View\n          style={{\n            flex: 1,\n            backgroundColor: themeStyle.backgroundColor,\n\n            justifyContent: 'space-between',\n            alignItems: 'center'\n          }}>\n          <Spinner\n            visible={this.state.spinnerTemp}\n          />\n          <View\n            style={{\n              flex: 1,\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center'\n            }}>\n            <TextInput\n              style={{\n                marginTop: 20,\n                height: 38,\n                width: WIDTH * 0.9,\n                borderColor: '#c1c1c1',\n                borderWidth: 1,\n                fontSize: themeStyle.mediumSize,\n                paddingLeft: 6,\n                paddingRight: 6,\n                textAlign: I18nManager.isRTL ? 'right' : 'left',\n                color: themeStyle.textColor\n              }}\n              placeholderTextColor={'#c1c1c1'}\n              secureTextEntry\n              selectionColor='#51688F'\n              placeholder={\n                this.props.isLoading.Config.languageJson2['Current Password']\n              }\n              onChangeText={currentPassword =>\n                this.setState({ currentPassword, errorMessage: '' })\n              }\n              value={this.state.currentPassword}\n            />\n\n            <TextInput\n              style={{\n                marginTop: 20,\n                height: 38,\n                width: WIDTH * 0.9,\n                borderColor: '#c1c1c1',\n                borderWidth: 1,\n                fontSize: themeStyle.mediumSize,\n                paddingLeft: 6,\n                paddingRight: 6,\n                textAlign: I18nManager.isRTL ? 'right' : 'left',\n                color: themeStyle.textColor\n              }}\n              placeholderTextColor={'#c1c1c1'}\n              secureTextEntry\n              selectionColor='#51688F'\n              placeholder={\n                this.props.isLoading.Config.languageJson2['New Password']\n              }\n              onChangeText={newPassword =>\n                this.setState({ newPassword, errorMessage: '' })\n              }\n              value={this.state.newPassword}\n            />\n\n            <TextInput\n              style={{\n                marginTop: 15,\n                height: 38,\n                width: WIDTH * 0.9,\n                borderColor: '#c1c1c1',\n                borderWidth: 1,\n                fontSize: themeStyle.mediumSize,\n                paddingLeft: 4,\n                textAlign: I18nManager.isRTL\n                  ? Platform.OS === 'android'\n                    ? 'right'\n                    : 'auto'\n                  : 'auto',\n                color: themeStyle.textColor\n              }}\n              placeholderTextColor={'#c1c1c1'}\n              secureTextEntry\n              selectionColor='#51688F'\n              placeholder={\n                this.props.isLoading.Config.languageJson2['Confirm Password']\n              }\n              onChangeText={password =>\n                this.setState({ password, errorMessage: '' })\n              }\n              value={this.state.password}\n            />\n\n            <TouchableOpacity\n              disabled={\n                this.state.newPassword.length === 0 ||\n                this.state.password.length === 0 ||\n                this.state.currentPassword.length === 0\n              }\n              onPress={() => this.updateInfo(this)}>\n              <View\n                style={{\n                  marginTop: 18,\n                  alignItems: 'center',\n                  height: 38,\n                  width: WIDTH * 0.9,\n                  backgroundColor:\n                    this.state.newPassword.length === 0 ||\n                    this.state.password.length === 0 ||\n                    this.state.currentPassword.length === 0\n                      ? '#c1c1c1'\n                      : themeStyle.otherBtnsColor,\n                  justifyContent: 'center',\n                  opacity:\n                    this.state.firstName === '' ||\n                    this.state.lastName === '' ||\n                    this.state.email === '' ||\n                    (this.state.password === '') === ''\n                      ? 0.4\n                      : 0.9\n                }}>\n                <Text\n                  style={{\n                    textAlign: 'center',\n                    color: themeStyle.otherBtnsText,\n                    fontSize: themeStyle.mediumSize,\n                    fontWeight: '500'\n                  }}>\n                  {this.props.isLoading.Config.languageJson2.Update}\n                </Text>\n              </View>\n            </TouchableOpacity>\n\n            {this.state.errorMessage !== '' ? (\n              <Text\n                style={{\n                  marginTop: 18,\n                  color: this.state.success !== '1' ? 'red' : 'green'\n                }}>\n                {this.state.errorMessage}\n              </Text>\n            ) : null}\n          </View>\n        </View>\n      </ScrollView>\n    )\n  }\n}\n\nconst mapStateToProps = state => ({\n  isLoading: state\n})\n\nexport default connect(mapStateToProps, null)(CreateAccount)\n"]},"metadata":{},"sourceType":"script"}