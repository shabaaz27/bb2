{"ast":null,"code":"var _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _classCallCheck2 = _interopRequireDefault(require(\"@babel/runtime/helpers/classCallCheck\"));\n\nvar _createClass2 = _interopRequireDefault(require(\"@babel/runtime/helpers/createClass\"));\n\nvar _common = require(\"@react-native-firebase/app/lib/common\");\n\nvar DatabaseOnDisconnect = function () {\n  function DatabaseOnDisconnect(reference) {\n    (0, _classCallCheck2.default)(this, DatabaseOnDisconnect);\n    this._ref = reference;\n  }\n\n  (0, _createClass2.default)(DatabaseOnDisconnect, [{\n    key: \"cancel\",\n    value: function cancel(onComplete) {\n      if (!(0, _common.isUndefined)(onComplete) && !(0, _common.isFunction)(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().cancel(*) 'onComplete' must be a function if provided.\");\n      }\n\n      return (0, _common.promiseWithOptionalCallback)(this._ref._database.native.onDisconnectCancel(this._ref.path), onComplete);\n    }\n  }, {\n    key: \"remove\",\n    value: function remove(onComplete) {\n      if (!(0, _common.isUndefined)(onComplete) && !(0, _common.isFunction)(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().remove(*) 'onComplete' must be a function if provided.\");\n      }\n\n      return (0, _common.promiseWithOptionalCallback)(this._ref._database.native.onDisconnectRemove(this._ref.path), onComplete);\n    }\n  }, {\n    key: \"set\",\n    value: function set(value, onComplete) {\n      if ((0, _common.isUndefined)(value)) {\n        throw new Error(\"firebase.database().ref().value(*) 'value' must be defined.\");\n      }\n\n      if (!(0, _common.isUndefined)(onComplete) && !(0, _common.isFunction)(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().set(_, *) 'onComplete' must be a function if provided.\");\n      }\n\n      return (0, _common.promiseWithOptionalCallback)(this._ref._database.native.onDisconnectSet(this._ref.path, {\n        value: value\n      }), onComplete);\n    }\n  }, {\n    key: \"setWithPriority\",\n    value: function setWithPriority(value, priority, onComplete) {\n      if ((0, _common.isUndefined)(value)) {\n        throw new Error(\"firebase.database().ref().setWithPriority(*) 'value' must be defined.\");\n      }\n\n      if (!(0, _common.isNumber)(priority) && !(0, _common.isString)(priority) && !(0, _common.isNull)(priority)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().setWithPriority(_, *) 'priority' must be a number, string or null value.\");\n      }\n\n      if (!(0, _common.isUndefined)(onComplete) && !(0, _common.isFunction)(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().setWithPriority(_, _, *) 'onComplete' must be a function if provided.\");\n      }\n\n      return (0, _common.promiseWithOptionalCallback)(this._ref._database.native.onDisconnectSetWithPriority(this._ref.path, {\n        value: value,\n        priority: priority\n      }), onComplete);\n    }\n  }, {\n    key: \"update\",\n    value: function update(values, onComplete) {\n      if (!(0, _common.isObject)(values)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().update(*) 'values' must be an object.\");\n      }\n\n      if (!Object.keys(values).length) {\n        throw new Error(\"firebase.database().ref().onDisconnect().update(*) 'values' must be an object containing multiple values.\");\n      }\n\n      var keys = Object.keys(values);\n\n      for (var i = 0; i < keys.length; i++) {\n        if (!(0, _common.isValidPath)(keys[i])) {\n          throw new Error('firebase.database().onDisconnect().update(*) \\'values\\' contains an invalid path. Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"');\n        }\n      }\n\n      if (!(0, _common.isUndefined)(onComplete) && !(0, _common.isFunction)(onComplete)) {\n        throw new Error(\"firebase.database().ref().onDisconnect().update(_, *) 'onComplete' must be a function if provided.\");\n      }\n\n      return (0, _common.promiseWithOptionalCallback)(this._ref._database.native.onDisconnectUpdate(this._ref.path, {\n        values: values\n      }), onComplete);\n    }\n  }]);\n  return DatabaseOnDisconnect;\n}();\n\nexports.default = DatabaseOnDisconnect;","map":{"version":3,"sources":["C:/Users/mysiew/Documents/eCommerce/codecanyon-xPJMYS8x-react-native-delivery-solution-with-advance-website-and-cms/SourceCode/vesend-consumer-app-master/node_modules/@react-native-firebase/database/lib/DatabaseOnDisconnect.js"],"names":["DatabaseOnDisconnect","reference","_ref","onComplete","Error","_database","native","onDisconnectCancel","path","onDisconnectRemove","value","onDisconnectSet","priority","onDisconnectSetWithPriority","values","Object","keys","length","i","onDisconnectUpdate"],"mappings":"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","sourcesContent":["/*\n * Copyright (c) 2016-present Invertase Limited & Contributors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this library except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport {\n  isFunction,\n  isNull,\n  isNumber,\n  isObject,\n  isString,\n  isUndefined,\n  isValidPath,\n  promiseWithOptionalCallback,\n} from '@react-native-firebase/app/lib/common';\n\nexport default class DatabaseOnDisconnect {\n  constructor(reference) {\n    this._ref = reference;\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#cancel\n   */\n  cancel(onComplete) {\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().cancel(*) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectCancel(this._ref.path),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#remove\n   */\n  remove(onComplete) {\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().remove(*) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectRemove(this._ref.path),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#set\n   */\n  set(value, onComplete) {\n    if (isUndefined(value)) {\n      throw new Error(\"firebase.database().ref().value(*) 'value' must be defined.\");\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().set(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectSet(this._ref.path, { value }),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#setwithpriority\n   */\n  setWithPriority(value, priority, onComplete) {\n    if (isUndefined(value)) {\n      throw new Error(\"firebase.database().ref().setWithPriority(*) 'value' must be defined.\");\n    }\n\n    if (!isNumber(priority) && !isString(priority) && !isNull(priority)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().setWithPriority(_, *) 'priority' must be a number, string or null value.\",\n      );\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().setWithPriority(_, _, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectSetWithPriority(this._ref.path, { value, priority }),\n      onComplete,\n    );\n  }\n\n  /**\n   * @url https://firebase.google.com/docs/reference/js/firebase.database.OnDisconnect#update\n   */\n  update(values, onComplete) {\n    if (!isObject(values)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().update(*) 'values' must be an object.\",\n      );\n    }\n\n    if (!Object.keys(values).length) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().update(*) 'values' must be an object containing multiple values.\",\n      );\n    }\n\n    const keys = Object.keys(values);\n    for (let i = 0; i < keys.length; i++) {\n      if (!isValidPath(keys[i])) {\n        throw new Error(\n          'firebase.database().onDisconnect().update(*) \\'values\\' contains an invalid path. Paths must be non-empty strings and can\\'t contain \".\", \"#\", \"$\", \"[\", or \"]\"',\n        );\n      }\n    }\n\n    if (!isUndefined(onComplete) && !isFunction(onComplete)) {\n      throw new Error(\n        \"firebase.database().ref().onDisconnect().update(_, *) 'onComplete' must be a function if provided.\",\n      );\n    }\n\n    return promiseWithOptionalCallback(\n      this._ref._database.native.onDisconnectUpdate(this._ref.path, { values }),\n      onComplete,\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"script"}